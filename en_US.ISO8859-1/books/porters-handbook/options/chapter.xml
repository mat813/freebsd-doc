<?xml version="1.0" encoding="iso-8859-1"?>
<!--
     The FreeBSD Documentation Project

     $FreeBSD$
-->
<chapter xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
  xml:id="makefile-options">

    <title>Makefile Options</title>

    <para>Many applications can be built with optional or differing
      configurations.  Examples include choice of natural (human)
      language, GUI versus command-line, or type of database to
      support.  Users may need a different configuration than the
      default, so the ports system provides hooks the port author can
      use to control which variant will be built.  Supporting these
      options properly will make users happy, and effectively provide
      two or more ports for the price of one.</para>

    <sect1 xml:id="makefile-options-options">
      <title><varname>OPTIONS</varname></title>

      <sect2 xml:id="makefile-options-background">
	<title>Background</title>

	<para><varname>OPTIONS_<replaceable>*</replaceable></varname>
	  give the user installing the port a dialog showing the
	  available options, and then saves those options to
	  <filename>${PORT_DBDIR}/${OPTIONS_NAME}/options</filename>.
	  The next time the port is built, the options are
	  reused.  <varname>PORT_DBDIR</varname> defaults to
	  <filename>/var/db/ports</filename>.
	  <varname>OPTIONS_NAME</varname> is to the port origin with
	  an underscore as the space separator, for example, for
	  <package role="port">dns/bind99</package> it will be
	  <literal>dns_bind99</literal>.</para>

	<para>When the user runs <command>make config</command> (or
	  runs <command>make build</command> for the first time), the
	  framework checks for
	  <filename>${PORT_DBDIR}/${OPTIONS_NAME}/options</filename>.
	  If that file does not exist, the values of
	  <varname>OPTIONS_<replaceable>*</replaceable></varname>
	  are used, and a dialog box is
	  displayed where the options can be enabled or disabled.
	  Then <filename>options</filename> is saved and the
	  configured variables are used when building the port.</para>

	<para>If a new version of the port adds new
	  <varname>OPTIONS</varname>, the dialog will be presented to
	  the user with the saved values of old
	  <varname>OPTIONS</varname> prefilled.</para>

	<para><command>make showconfig</command> shows the saved
	  configuration.  Use <command>make rmconfig</command>
	  to remove the saved configuration.</para>
      </sect2>

      <sect2 xml:id="makefile-options-syntax">
	<title>Syntax</title>

	<para><varname>OPTIONS_DEFINE</varname> contains a list of
	  <varname>OPTIONS</varname> to be used.  These are
	  independent of each other and are not grouped:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1 OPT2</programlisting>

	<para>Once defined, <varname>OPTIONS</varname> are
	  described (optional, but strongly recommended):</para>

	<programlisting>OPT1_DESC=	Describe OPT1
OPT2_DESC=	Describe OPT2
OPT3_DESC=	Describe OPT3
OPT4_DESC=	Describe OPT4
OPT5_DESC=	Describe OPT5
OPT6_DESC=	Describe OPT6</programlisting>

	<para><filename>ports/Mk/bsd.options.desc.mk</filename>
	  has descriptions for many common <varname>OPTIONS</varname>.
	  While often useful, override them if the
	  description is insufficient for the port.</para>

	<tip>
	  <para>When describing options, view it from the
	    perspective of the user: <quote>What functionality does it
	      change?</quote>
	    and <quote>Why would I want to enable this?</quote>
	    Do not just repeat the name.  For example, describing the
	    <literal>NLS</literal> option as
	    <quote>include NLS support</quote> does not help the user,
	    who can already see the option name but may not know what
	    it means.  Describing it as <quote>Native Language Support
	      via gettext utilities</quote> is much more
	    helpful.</para>
	</tip>

	<important>
	  <para>Option names are always in all uppercase.  They
	    cannot use mixed case or lowercase.</para>
	</important>

	<para><varname>OPTIONS</varname> can be grouped as radio
	  choices, where only one choice from each group is
	  allowed:</para>

	<programlisting>OPTIONS_SINGLE=		SG1
OPTIONS_SINGLE_SG1=	OPT3 OPT4</programlisting>

	<warning>
	  <para>There <emphasis>must</emphasis> be one of each
	    <literal>OPTIONS_SINGLE</literal> group selected at all
	    times for the options to be valid.  One option of each
	    group <emphasis>must</emphasis> be added to
	    <varname>OPTIONS_DEFAULT</varname>.</para>
	</warning>

	<para><varname>OPTIONS</varname> can be grouped as radio
	  choices, where none or only one choice from each group
	  is allowed:</para>

	<programlisting>OPTIONS_RADIO=		RG1
OPTIONS_RADIO_RG1=	OPT7 OPT8</programlisting>

	<para><varname>OPTIONS</varname> can also be grouped as
	  <quote>multiple-choice</quote> lists, where
	  <emphasis>at least one</emphasis> option must be
	  enabled:</para>

	<programlisting>OPTIONS_MULTI=		MG1
OPTIONS_MULTI_MG1=	OPT5 OPT6</programlisting>

	<para><varname>OPTIONS</varname> can also be grouped as
	  <quote>multiple-choice</quote> lists, where none or any
	  option can be enabled:</para>

	<programlisting>OPTIONS_GROUP=		GG1
OPTIONS_GROUP_GG1=	OPT9 OPT10</programlisting>

	<para><varname>OPTIONS</varname> are unset by default,
	  unless they are listed in
	  <varname>OPTIONS_DEFAULT</varname>:</para>

	<programlisting>OPTIONS_DEFAULT=	OPT1 OPT3 OPT6</programlisting>

	<para><varname>OPTIONS</varname> definitions must appear
	  before the inclusion of
	  <filename>bsd.port.options.mk</filename>.
	  <varname>PORT_OPTIONS</varname> values can only be tested
	  after the inclusion of
	  <filename>bsd.port.options.mk</filename>.  Inclusion of
	  <filename>bsd.port.pre.mk</filename> can be used instead,
	  too, and is still widely used in ports written before the
	  introduction of <filename>bsd.port.options.mk</filename>.
	  But be aware that some variables will not work as expected
	  after the inclusion of <filename>bsd.port.pre.mk</filename>,
	  typically some
	  <varname>USE_<replaceable>*</replaceable></varname>
	  flags.</para>

	<example xml:id="ports-options-simple-use">
	  <title>Simple Use of <varname>OPTIONS</varname></title>

	  <programlisting>OPTIONS_DEFINE=	FOO BAR
FOO_DESC=	Option foo support
BAR_DESC=	Feature bar support

OPTIONS_DEFAULT=FOO

# Will add --with-foo / --without-foo
FOO_CONFIGURE_WITH=	foo
BAR_RUN_DEPENDS=	bar:bar/bar

.include &lt;bsd.port.mk&gt;</programlisting>
	</example>

	<example xml:id="ports-options-check-unset">
	  <title>Check for Unset Port
	    <varname>OPTIONS</varname></title>

	  <programlisting>.if ! ${PORT_OPTIONS:MEXAMPLES}
CONFIGURE_ARGS+=--without-examples
.endif</programlisting>

	  <para>The form shown above is discouraged.  The preferred
	    method is using a configure knob to really enable and
	    disable the feature to match the option:</para>

	  <programlisting># Will add --with-examples / --without-examples
EXAMPLES_CONFIGURE_WITH=	examples</programlisting>
	</example>

	<example xml:id="ports-options-practical-use">
	  <title>Practical Use of <varname>OPTIONS</varname></title>

	  <programlisting>OPTIONS_DEFINE=		EXAMPLES

OPTIONS_SINGLE=		BACKEND
OPTIONS_SINGLE_BACKEND=	MYSQL PGSQL BDB

OPTIONS_MULTI=		AUTH
OPTIONS_MULTI_AUTH=	LDAP PAM SSL

EXAMPLES_DESC=		Install extra examples
MYSQL_DESC=		Use MySQL as backend
PGSQL_DESC=		Use PostgreSQL as backend
BDB_DESC=		Use Berkeley DB as backend
LDAP_DESC=		Build with LDAP authentication support
PAM_DESC=		Build with PAM support
SSL_DESC=		Build with OpenSSL support

OPTIONS_DEFAULT=	PGSQL LDAP SSL

# Will add USE_PGSQL=yes
PGSQL_USE=	pgsql=yes
# Will add --enable-postgres / --disable-postgres
PGSQL_CONFIGURE_ENABLE=	postgres

ICU_LIB_DEPENDS=	libicuuc.so:devel/icu

# Will add --with-examples / --without-examples
EXAMPLES_CONFIGURE_WITH=	examples

# Check other OPTIONS

.include &lt;bsd.port.mk&gt;</programlisting>
	</example>
      </sect2>

      <sect2 xml:id="makefile-options-default">
	<title>Default Options</title>

	<para>These options are always on by default.</para>

	<itemizedlist>
	  <listitem>
	    <para><literal>DOCS</literal> &mdash; build and install
	      documentation.</para>
	  </listitem>

	  <listitem>
	    <para><literal>NLS</literal> &mdash; Native Language
	      Support.</para>
	  </listitem>

	  <listitem>
	    <para><literal>EXAMPLES</literal> &mdash; build and
	      install examples.</para>
	  </listitem>

	  <listitem>
	    <para><literal>IPV6</literal> &mdash; IPv6 protocol
	      support.</para>
	  </listitem>
	</itemizedlist>

	<note>
	  <para>There is no need to add these to
	    <varname>OPTIONS_DEFAULT</varname>.  To have them active,
	    and show up in the options selection dialog, however, they
	    must be added to <varname>OPTIONS_DEFINE</varname>.</para>
	</note>
      </sect2>
    </sect1>

    <sect1 xml:id="makefile-options-auto-activation">
      <title>Feature Auto-Activation</title>

      <para>When using a GNU configure script, keep an eye on which
	optional features are activated by auto-detection.  Explicitly
	disable optional features that are not needed by
	adding <literal>--without-xxx</literal> or
	<literal>--disable-xxx</literal> in
	<varname>CONFIGURE_ARGS</varname>.</para>

      <example xml:id="makefile-options-auto-activation-bad">
	<title>Wrong Handling of an Option</title>

	<programlisting>.if ${PORT_OPTIONS:MFOO}
LIB_DEPENDS+=		libfoo.so:devel/foo
CONFIGURE_ARGS+=	--enable-foo
.endif</programlisting>
      </example>

      <para>In the example above, imagine a library libfoo is
	installed on the system.  The user does not want this
	application to use libfoo, so he toggled the option off in the
	<literal>make config</literal> dialog.  But the application's
	configure script detects the library present in the system and
	includes its support in the resulting executable.  Now when
	the user decides to remove libfoo from the system, the ports
	system does not protest (no dependency on libfoo was recorded)
	but the application breaks.</para>

      <example xml:id="makefile-options-auto-activation-good">
	<title>Correct Handling of an Option</title>

	<programlisting>FOO_LIB_DEPENDS=		libfoo.so:devel/foo
# Will add --enable-foo / --disable-foo
FOO_CONFIGURE_ENABLE=	foo</programlisting>
      </example>

      <note>
	<para>Under some circumstances, the shorthand conditional
	  syntax can cause problems with complex constructs.  The
	  errors are usually
	  <literal>Malformed conditional</literal>, an alternative
	  syntax can be used.</para>

	<programlisting>.if !empty(VARIABLE:MVALUE)</programlisting>

	<para>as an alternative to</para>

	<programlisting>.if ${VARIABLE:MVALUE}</programlisting>
      </note>
    </sect1>

    <sect1 xml:id="options-helpers">
      <title>Options Helpers</title>

      <para>There are some macros to help simplify conditional values
	which differ based on the options set.  For easier access, a
	comprehensive list is provided:</para>

      <variablelist xml:id="options-helpers-list">
	<varlistentry>
	  <term><varname>PLIST_SUB</varname>,
	    <varname>SUB_LIST</varname></term>

	  <listitem>
	    <para>For automatic
	      <literal>%%<replaceable>OPT</replaceable>%%</literal>
	      and
	      <literal>%%NO_<replaceable>OPT</replaceable>%%</literal>
	      generation, see <xref linkend="options_sub"/>.</para>

	    <para>For more complex usage, see <xref
	      linkend="options-variables"/>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><varname>CONFIGURE_ARGS</varname></term>

	  <listitem>
	    <para>For
	      <literal>--enable-<replaceable>x</replaceable></literal>
	      and
	      <literal>--disable-<replaceable>x</replaceable></literal>,
	      see <xref linkend="options-configure_enable"/>.</para>

	    <para>For
	      <literal>--with-<replaceable>x</replaceable></literal>
	      and
	      <literal>--without-<replaceable>x</replaceable></literal>,
	      see <xref linkend="options-configure_with"/>.</para>

	    <para>For all other cases, see <xref
		linkend="options-configure_on"/>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><varname>CMAKE_ARGS</varname></term>

	  <listitem>
	    <para>For arguments that are booleans
	      (<literal>on</literal>, <literal>off</literal>,
	      <literal>true</literal>, <literal>false</literal>,
	      <literal>0</literal>, <literal>1</literal>) see <xref
		linkend="options-cmake_bool"/>.</para>

	    <para>For all other cases, see <xref
		linkend="options-cmake_on"/>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><varname>MESON_ARGS</varname></term>
	  <listitem>
	    <para>For arguments that take <literal>true</literal> or
	      <literal>false</literal>, see <xref
		linkend="options-meson_true"/>.</para>

	    <para>For arguments that take <literal>yes</literal> or
	      <literal>no</literal>, use <xref
		linkend="options-meson_yes"/>.</para>

	    <para>For all other cases, use <xref
		linkend="options-meson_on"/>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><varname>QMAKE_ARGS</varname></term>

	  <listitem>
	    <para>See <xref linkend="options-qmake_on"/>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><varname>USE_<replaceable>*</replaceable></varname></term>

	  <listitem>
	    <para>See <xref linkend="options-use"/>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><varname><replaceable>*</replaceable>_DEPENDS</varname></term>

	  <listitem>
	    <para>See <xref linkend="options-dependencies"/>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term><replaceable>*</replaceable> (Any variable)</term>

	  <listitem>
	    <para>The most used variables have direct helpers, see
	      <xref linkend="options-variables"/>.</para>

	    <para>For any variable without a specific helper, see
	      <xref linkend="options-vars"/>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>Options dependencies</term>

	  <listitem>
	    <para>When an option need another option to work, see
	      <xref linkend="options-implies"/>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>Options conflicts</term>

	  <listitem>
	    <para>When an option cannot work if another is also
	      enabled, see <xref linkend="options-prevents"/>.</para>
	  </listitem>
	</varlistentry>

	<varlistentry>
	  <term>Build targets</term>

	  <listitem>
	    <para>When an option need some extra processing, see <xref
		linkend="options-targets"/>.</para>
	  </listitem>
	</varlistentry>
      </variablelist>

      <sect2 xml:id="options_sub">
	<title><varname>OPTIONS_SUB</varname></title>

	<para>If <varname>OPTIONS_SUB</varname> is set to
	  <literal>yes</literal> then each of the options added to
	  <varname>OPTIONS_DEFINE</varname> will be added to
	  <varname>PLIST_SUB</varname> and
	  <varname>SUB_LIST</varname>, for example:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1
OPTIONS_SUB=	yes</programlisting>

	<para>is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
PLIST_SUB+=	OPT1="" NO_OPT1="@comment "
SUB_LIST+=	OPT1="" NO_OPT1="@comment "
.else
PLIST_SUB+=	OPT1="@comment " NO_OPT1=""
SUB_LIST+=	OPT1="@comment " NO_OPT1=""
.endif</programlisting>

	<note>
	  <para>The value of <varname>OPTIONS_SUB</varname> is
	    ignored.  Setting it to any value will add
	    <varname>PLIST_SUB</varname> and
	    <varname>SUB_LIST</varname> entries for
	    <emphasis>all</emphasis> options.</para>
	</note>
      </sect2>

      <sect2 xml:id="options-use">
	<title><varname><replaceable>OPT</replaceable>_USE</varname>
	  and
	  <varname><replaceable>OPT</replaceable>_USE_OFF</varname></title>

	<para>When option <replaceable>OPT</replaceable> is selected,
	  for each
	  <literal><replaceable>key</replaceable>=<replaceable>value</replaceable></literal>
	  pair in
	  <varname><replaceable>OPT</replaceable>_USE</varname>,
	  <replaceable>value</replaceable> is appended to the
	  corresponding
	  <varname>USE_<replaceable>KEY</replaceable></varname>.  If
	  <replaceable>value</replaceable> has spaces in it, replace
	  them with commas and they will be changed back to spaces
	  during processing.
	  <varname><replaceable>OPT</replaceable>_USE_OFF</varname>
	  works the same way, but when <literal>OPT</literal> is
	  <emphasis>not</emphasis> selected.   For example:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1
OPT1_USE=	mysql=yes xorg=x11,xextproto,xext,xrandr
OPT1_USE_OFF=	openssl=yes</programlisting>

	<para>is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
USE_MYSQL=	yes
USE_XORG=	x11 xextproto xext xrandr
.else
USE_OPENSSL=	yes
.endif</programlisting>
      </sect2>

      <sect2 xml:id="options-configure-helpers">
	<title><varname>CONFIGURE_ARGS</varname> Helpers</title>

	<sect3 xml:id="options-configure_enable">
	  <title><varname><replaceable>OPT</replaceable>_CONFIGURE_ENABLE</varname></title>

	  <para>When option <replaceable>OPT</replaceable> is
	    selected, for each <replaceable>entry</replaceable> in
	    <varname><replaceable>OPT</replaceable>_CONFIGURE_ENABLE</varname>
	    then
	    <literal>--enable-<replaceable>entry</replaceable></literal>
	    is appended to <varname>CONFIGURE_ARGS</varname>.  When
	    option <replaceable>OPT</replaceable> is
	    <emphasis>not</emphasis> selected,
	    <literal>--disable-<replaceable>entry</replaceable></literal>
	    is appended to <varname>CONFIGURE_ARGS</varname>.  An
	    optional argument can be specified with an
	    <literal>=</literal> symbol.  This argument is only
	    appended to the
	    <literal>--enable-<replaceable>entry</replaceable></literal>
	    configure option.  For example:</para>

	  <programlisting>OPTIONS_DEFINE=	OPT1 OPT2
OPT1_CONFIGURE_ENABLE=	test1 test2
OPT2_CONFIGURE_ENABLE=	test2=exhaustive</programlisting>

	  <para>is equivalent to:</para>

	  <programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
CONFIGURE_ARGS+=	--enable-test1 --enable-test2
.else
CONFIGURE_ARGS+=	--disable-test1 --disable-test2
.endif

.if ${PORT_OPTIONS:MOPT2}
CONFIGURE_ARGS+=	--enable-test2=exhaustive
.else
CONFIGURE_ARGS+=	--disable-test2
.endif</programlisting>
	</sect3>

	<sect3 xml:id="options-configure_with">
	  <title><varname><replaceable>OPT</replaceable>_CONFIGURE_WITH</varname></title>

	  <para>When option <replaceable>OPT</replaceable> is
	    selected, for each <replaceable>entry</replaceable> in
	    <varname><replaceable>OPT</replaceable>_CONFIGURE_WITH</varname>
	    then
	    <literal>--with-<replaceable>entry</replaceable></literal>
	    is appended to <varname>CONFIGURE_ARGS</varname>.  When
	    option <replaceable>OPT</replaceable> is
	    <emphasis>not</emphasis> selected,
	    <literal>--without-<replaceable>entry</replaceable></literal>
	    is appended to <varname>CONFIGURE_ARGS</varname>.  An
	    optional argument can be specified with an
	    <literal>=</literal> symbol.  This argument is only
	    appended to the
	    <literal>--with-<replaceable>entry</replaceable></literal>
	    configure option.  For example:</para>

	  <programlisting>OPTIONS_DEFINE=	OPT1 OPT2
OPT1_CONFIGURE_WITH=	test1
OPT2_CONFIGURE_WITH=	test2=exhaustive</programlisting>

	  <para>is equivalent to:</para>

	  <programlisting>OPTIONS_DEFINE=	OPT1 OPT2

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
CONFIGURE_ARGS+=	--with-test1
.else
CONFIGURE_ARGS+=	--without-test1
.endif

.if ${PORT_OPTIONS:MOPT2}
CONFIGURE_ARGS+=	--with-test2=exhaustive
.else
CONFIGURE_ARGS+=	--without-test2
.endif</programlisting>
	</sect3>

	<sect3 xml:id="options-configure_on">
	  <title><varname><replaceable>OPT</replaceable>_CONFIGURE_ON</varname>
	    and
	    <varname><replaceable>OPT</replaceable>_CONFIGURE_OFF</varname></title>

	  <para>When option <replaceable>OPT</replaceable> is
	    selected, the value of
	    <varname><replaceable>OPT</replaceable>_CONFIGURE_ON</varname>,
	    if defined, is appended to
	    <varname>CONFIGURE_ARGS</varname>.
	    <varname><replaceable>OPT</replaceable>_CONFIGURE_OFF</varname>
	    works the same way, but when <literal>OPT</literal> is
	    <emphasis>not</emphasis> selected.  For example:</para>

	  <programlisting>OPTIONS_DEFINE=	OPT1
OPT1_CONFIGURE_ON=	--add-test
OPT1_CONFIGURE_OFF=	--no-test</programlisting>

	  <para>is equivalent to:</para>

	  <programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
CONFIGURE_ARGS+=	--add-test
.else
CONFIGURE_ARGS+=	--no-test
.endif</programlisting>

	  <tip>
	    <para>Most of the time, the helpers in <xref
		linkend="options-configure_enable"/> and <xref
		linkend="options-configure_with"/> provide a shorter
	      and more comprehensive functionality.</para>
	  </tip>
	</sect3>
      </sect2>

      <sect2 xml:id="options-cmake-helpers">
	<title><varname>CMAKE_ARGS</varname> Helpers</title>

	<sect3 xml:id="options-cmake_on">
	  <title><varname><replaceable>OPT</replaceable>_CMAKE_ON</varname>
	    and
	    <varname><replaceable>OPT</replaceable>_CMAKE_OFF</varname></title>

	  <para>When option <replaceable>OPT</replaceable> is
	    selected, the value of
	    <varname><replaceable>OPT</replaceable>_CMAKE_ON</varname>,
	    if defined, is appended to <varname>CMAKE_ARGS</varname>.
	    <varname><replaceable>OPT</replaceable>_CMAKE_OFF</varname>
	    works the same way, but when <literal>OPT</literal> is
	    <emphasis>not</emphasis> selected.  For example:</para>

	  <programlisting>OPTIONS_DEFINE=	OPT1
OPT1_CMAKE_ON=	-DTEST:BOOL=true -DDEBUG:BOOL=true
OPT1_CMAKE_OFF=	-DOPTIMIZE:BOOL=true</programlisting>

	  <para>is equivalent to:</para>

	  <programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
CMAKE_ARGS+=	-DTEST:BOOL=true -DDEBUG:BOOL=true
.else
CMAKE_ARGS+=	-DOPTIMIZE:BOOL=true
.endif</programlisting>

	  <tip>
	    <para>See <xref linkend="options-cmake_bool"/> for a
	      shorter helper when the value is boolean.</para>
	  </tip>
	</sect3>

	<sect3 xml:id="options-cmake_bool">
	  <title><varname><replaceable>OPT</replaceable>_CMAKE_BOOL</varname>
	    and
	    <varname><replaceable>OPT</replaceable>_CMAKE_BOOL_OFF</varname></title>

	  <para>When option <replaceable>OPT</replaceable> is
	    selected, for each <replaceable>entry</replaceable> in
	    <varname><replaceable>OPT</replaceable>_CMAKE_BOOL</varname>
	    then
	    <literal>-D<replaceable>entry</replaceable>:BOOL=true</literal>
	    is appended to <varname>CMAKE_ARGS</varname>.  When option
	    <replaceable>OPT</replaceable> is <emphasis>not</emphasis>
	    selected,
	    <literal>-D<replaceable>entry</replaceable>:BOOL=false</literal>
	    is appended to <varname>CONFIGURE_ARGS</varname>.
	    <varname><replaceable>OPT</replaceable>_CMAKE_BOOL_OFF</varname>
	    is the oposite,
	    <literal>-D<replaceable>entry</replaceable>:BOOL=false</literal>
	    is appended to <varname>CMAKE_ARGS</varname> when the
	    option is selected, and
	    <literal>-D<replaceable>entry</replaceable>:BOOL=true</literal>
	    when the option is <emphasis>not</emphasis> selected.  For
	    example:</para>

	  <programlisting>OPTIONS_DEFINE=	OPT1
OPT1_CMAKE_BOOL=	TEST DEBUG
OPT1_CMAKE_BOOL_OFF=	OPTIMIZE</programlisting>

	  <para>is equivalent to:</para>

	  <programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
CMAKE_ARGS+=	-DTEST:BOOL=true -DDEBUG:BOOL=true \
		-DOPTIMIZE:BOOL=false
.else
CMAKE_ARGS+=	-DTEST:BOOL=false -DDEBUG:BOOL=false \
		-DOPTIMIZE:BOOL=true
.endif</programlisting>
	</sect3>
      </sect2>

      <sect2 xml:id="options-meson-helpers">
	<title><varname>MESON_ARGS</varname> Helpers</title>

	<sect3 xml:id="options-meson_on">
	  <title><varname><replaceable>OPT</replaceable>_MESON_ON</varname>
	    and
	    <varname><replaceable>OPT</replaceable>_MESON_OFF</varname></title>

	  <para>When option <replaceable>OPT</replaceable> is
	    selected, the value of
	    <varname><replaceable>OPT</replaceable>_MESON_ON</varname>,
	    if defined, is appended to <varname>MESON_ARGS</varname>.
	    <varname><replaceable>OPT</replaceable>_MESON_OFF</varname>
	    works the same way, but when <literal>OPT</literal> is
	    <emphasis>not</emphasis> selected.  For example:</para>

	  <programlisting>OPTIONS_DEFINE=	OPT1
OPT1_MESON_ON=	-Dopt=1
OPT1_MESON_OFF=	-Dopt=2</programlisting>

	  <para>is equivalent to:</para>

	  <programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
MESON_ARGS+=	-Dopt=1
.else
MESON_ARGS+=	-Dopt=2
.endif</programlisting>
	</sect3>

	<sect3 xml:id="options-meson_true">
	  <title><varname><replaceable>OPT</replaceable>_MESON_TRUE</varname>
	    and
	    <varname><replaceable>OPT</replaceable>_MESON_FALSE</varname></title>

	  <para>When option <replaceable>OPT</replaceable> is
	    selected, for each <replaceable>entry</replaceable> in
	    <varname><replaceable>OPT</replaceable>_MESON_TRUE</varname>
	    then
	    <literal>-D<replaceable>entry</replaceable>=true</literal>
	    is appended to <varname>CMAKE_ARGS</varname>.  When option
	    <replaceable>OPT</replaceable> is <emphasis>not</emphasis>
	    selected,
	    <literal>-D<replaceable>entry</replaceable>=false</literal>
	    is appended to <varname>CONFIGURE_ARGS</varname>.
	    <varname><replaceable>OPT</replaceable>_MESON_FALSE</varname>
	    is the oposite,
	    <literal>-D<replaceable>entry</replaceable>=false</literal>
	    is appended to <varname>CMAKE_ARGS</varname> when the
	    option is selected, and
	    <literal>-D<replaceable>entry</replaceable>=true</literal>
	    when the option is <emphasis>not</emphasis> selected.  For
	    example:</para>

	  <programlisting>OPTIONS_DEFINE=	OPT1
OPT1_MESON_TRUE=	test debug
OPT1_MESON_FALSE=	optimize</programlisting>

	  <para>is equivalent to:</para>

	  <programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
MESON_ARGS+=	-Dtest=true -Ddebug=true \
		-Doptimize=false
.else
MESON_ARGS+=	-Dtest=false -Ddebug=false \
		-Doptimize=true
.endif</programlisting>
	</sect3>

	<sect3 xml:id="options-meson_yes">
	  <title><varname><replaceable>OPT</replaceable>_MESON_YES</varname>
	    and
	    <varname><replaceable>OPT</replaceable>_MESON_NO</varname></title>

	  <para>When option <replaceable>OPT</replaceable> is
	    selected, for each <replaceable>entry</replaceable> in
	    <varname><replaceable>OPT</replaceable>_MESON_YES</varname>
	    then
	    <literal>-D<replaceable>entry</replaceable>=yes</literal>
	    is appended to <varname>CMAKE_ARGS</varname>.  When option
	    <replaceable>OPT</replaceable> is <emphasis>not</emphasis>
	    selected,
	    <literal>-D<replaceable>entry</replaceable>=no</literal>
	    is appended to <varname>CONFIGURE_ARGS</varname>.
	    <varname><replaceable>OPT</replaceable>_MESON_NO</varname>
	    is the oposite,
	    <literal>-D<replaceable>entry</replaceable>=no</literal>
	    is appended to <varname>CMAKE_ARGS</varname> when the
	    option is selected, and
	    <literal>-D<replaceable>entry</replaceable>=yes</literal>
	    when the option is <emphasis>not</emphasis> selected.  For
	    example:</para>

	  <programlisting>OPTIONS_DEFINE=	OPT1
OPT1_MESON_YES=	test debug
OPT1_MESON_NO=	optimize</programlisting>

	  <para>is equivalent to:</para>

	  <programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
CMAKE_ARGS+=	-Dtest=yes -Ddebug=yes \
		-Doptimize=no
.else
CMAKE_ARGS+=	-Dtest=no -Ddebug=no \
		-Doptimize=yes
.endif</programlisting>
	</sect3>
      </sect2>

      <sect2 xml:id="options-qmake_on">
	<title><varname><replaceable>OPT</replaceable>_QMAKE_ON</varname>
	  and
	  <varname><replaceable>OPT</replaceable>_QMAKE_OFF</varname></title>

	<para>When option <replaceable>OPT</replaceable> is selected,
	  the value of
	  <varname><replaceable>OPT</replaceable>_QMAKE_ON</varname>,
	  if defined, is appended to <varname>QMAKE_ARGS</varname>.
	  <varname><replaceable>OPT</replaceable>_QMAKE_OFF</varname>
	  works the same way, but when <literal>OPT</literal> is
	  <emphasis>not</emphasis> selected.  For example:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1
OPT1_QMAKE_ON=	-DTEST:BOOL=true
OPT1_QMAKE_OFF=	-DPRODUCTION:BOOL=true</programlisting>

	<para>is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
QMAKE_ARGS+=	-DTEST:BOOL=true
.else
QMAKE_ARGS+=	-DPRODUCTION:BOOL=true
.endif</programlisting>
      </sect2>

      <sect2 xml:id="options-implies">
	<title><varname><replaceable>OPT</replaceable>_IMPLIES</varname></title>

	<para>Provides a way to add dependencies between
	  options.</para>

	<para>When <replaceable>OPT</replaceable> is selected, all the
	  options listed in this variable will be selected too.  Using
	  the <link
	    linkend="options-configure_enable"><varname><replaceable>OPT</replaceable>_CONFIGURE_ENABLE</varname></link>
	  described earlier to illustrate:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1 OPT2
OPT1_IMPLIES=	OPT2

OPT1_CONFIGURE_ENABLE=	opt1
OPT2_CONFIGURE_ENABLE=	opt2</programlisting>

	<para>Is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1 OPT2

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
CONFIGURE_ARGS+=	--enable-opt1
.else
CONFIGURE_ARGS+=	--disable-opt1
.endif

.if ${PORT_OPTIONS:MOPT2} || ${PORT_OPTIONS:MOPT1}
CONFIGURE_ARGS+=	--enable-opt2
.else
CONFIGURE_ARGS+=	--disable-opt2
.endif</programlisting>

	<example xml:id="options-implies-ex1">
	  <title>Simple Use of
	    <varname><replaceable>OPT</replaceable>_IMPLIES</varname></title>

	  <para>This port has a <literal>X11</literal> option, and a
	    <literal>GNOME</literal> option that needs the
	    <literal>X11</literal> option to be selected to
	    build.</para>

	  <programlisting>OPTIONS_DEFINE=	X11 GNOME
OPTIONS_DEFAULT=	X11

X11_USE=	xorg=xi,xextproto
GNOME_USE=	gnome=gtk30
GNOME_IMPLIES=	X11</programlisting>
	</example>
      </sect2>

      <sect2 xml:id="options-prevents">
	<title><varname><replaceable>OPT</replaceable>_PREVENTS</varname>
	  and
	  <varname><replaceable>OPT</replaceable>_PREVENTS_MSG</varname></title>

	<para>Provides a way to add conflicts between options.</para>

	<para>When <replaceable>OPT</replaceable> is selected, all the
	  options listed in this variable must be un-selected.  If
	  <varname><replaceable>OPT</replaceable>_PREVENTS_MSG</varname>
	  is also selected, its content will be shown, explaining why
	  they conflict.  For example:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1 OPT2
OPT1_PREVENTS=	OPT2
OPT1_PREVENTS_MSG=	OPT1 and OPT2 enable conflicting options</programlisting>

	<para>Is roughly equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1 OPT2

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT2} &amp;&amp; ${PORT_OPTIONS:MOPT1}
BROKEN=	Option OPT1 conflicts with OPT2 (select only one)
.endif</programlisting>

	<para>The only difference is that the first one will write an
	  error after running <command>make config</command>,
	  suggesting changing the selected options.</para>

	<example xml:id="options-prevents-ex1">
	  <title>Simple Use of
	    <varname><replaceable>OPT</replaceable>_PREVENTS</varname></title>

	  <para>This port has <literal>X509</literal> and
	    <literal>SCTP</literal> options.  Both options add
	    patches, but the patches conflict with each other, so they
	    cannot be selected at the same time.</para>

	  <programlisting>OPTIONS_DEFINE=	X509 SCTP

SCTP_PATCHFILES=	${PORTNAME}-6.8p1-sctp-2573.patch.gz:-p1
SCTP_CONFIGURE_WITH=	sctp

X509_PATCH_SITES=	http://www.roumenpetrov.info/openssh/x509/:x509
X509_PATCHFILES=	${PORTNAME}-7.0p1+x509-8.5.diff.gz:-p1:x509
X509_PREVENTS=		SCTP
X509_PREVENTS_MSG=	X509 and SCTP patches conflict</programlisting>
	</example>
      </sect2>

      <sect2 xml:id="options-vars">
	<title><varname><replaceable>OPT</replaceable>_VARS</varname>
	  and
	  <varname><replaceable>OPT</replaceable>_VARS_OFF</varname></title>

	<para>Provides a generic way to set and append to
	  variables.</para>

	<warning><para>Before using
	  <varname><replaceable>OPT</replaceable>_VARS</varname> and
	  <varname><replaceable>OPT</replaceable>_VARS_OFF</varname>,
	  see if there is already a more specific helper available in
	  <xref linkend="options-variables"/>.</para></warning>

	<para>When option <replaceable>OPT</replaceable> is selected,
	  and <varname><replaceable>OPT</replaceable>_VARS</varname>
	  defined,
	  <literal><replaceable>key</replaceable>=<replaceable>value</replaceable></literal>
	  and
	  <literal><replaceable>key</replaceable>+=<replaceable>value</replaceable></literal>
	  pairs are evaluated from
	  <varname><replaceable>OPT</replaceable>_VARS</varname>.  An
	  <literal>=</literal> cause the existing value of
	  <literal>KEY</literal> to be overwritten, an
	  <literal>+=</literal> appends to the value.
	  <varname><replaceable>OPT</replaceable>_VARS_OFF</varname>
	  works the same way, but when <literal>OPT</literal> is
	  <emphasis>not</emphasis> selected.</para>

	<programlisting>OPTIONS_DEFINE=	OPT1 OPT2 OPT3
OPT1_VARS=	also_build+=bin1
OPT2_VARS=	also_build+=bin2
OPT3_VARS=	bin3_build=yes
OPT3_VARS_OFF=	bin3_build=no

MAKE_ARGS=	ALSO_BUILD="${ALSO_BUILD}" BIN3_BUILD="${BIN3_BUILD}"</programlisting>

	<para>is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1 OPT2

MAKE_ARGS=	ALSO_BUILD="${ALSO_BUILD}" BIN3_BUILD="${BIN3_BUILD}"

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
ALSO_BUILD+=	bin1
.endif

.if ${PORT_OPTIONS:MOPT2}
ALSO_BUILD+=	bin2
.endif

.if ${PORT_OPTIONS:MOPT2}
BIN3_BUILD=	yes
.else
BIN3_BUILD=	no
.endif</programlisting>

	<important>
	  <para>Values containing whitespace must be enclosed in
	    quotes:</para>

	  <programlisting>OPT_VARS=	foo="bar baz"</programlisting>

	  <para>This is due to the way &man.make.1; variable expansion
	    deals with whitespace.  When <literal>OPT_VARS= foo=bar
	      baz</literal> is expanded, the variable ends up
	    containing two strings, <literal>foo=bar</literal> and
	    <literal>baz</literal>.  But the submitter probably
	    intended there to be only one string, <literal>foo=bar
	      baz</literal>.  Quoting the value prevents whitespace
	    from being used as a delimiter.</para>

	  <para>Also, <emphasis>do not</emphasis> add extra spaces
	    after the
	    <literal><replaceable>var</replaceable>=</literal> sign
	    and before the value, it would also be split into two
	    strings.  <emphasis>This will not work</emphasis>:</para>

	  <programlisting>OPT_VARS=	foo=	bar</programlisting>
	</important>
      </sect2>

      <sect2 xml:id="options-dependencies">
	<title>Dependencies,
	  <varname><replaceable>OPT</replaceable>_<replaceable>DEPTYPE</replaceable></varname>
	  and
	  <varname><replaceable>OPT</replaceable>_<replaceable>DEPTYPE</replaceable>_OFF</varname></title>

	<para>For any of these dependency types:</para>

	<itemizedlist>
	  <listitem>
	    <para><varname>PKG_DEPENDS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>EXTRACT_DEPENDS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>PATCH_DEPENDS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>FETCH_DEPENDS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>BUILD_DEPENDS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>LIB_DEPENDS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>RUN_DEPENDS</varname></para>
	  </listitem>
	</itemizedlist>

	<para>When option <replaceable>OPT</replaceable> is
	  selected, the value of
	  <varname><replaceable>OPT</replaceable>_<replaceable>DEPTYPE</replaceable></varname>,
	  if defined, is appended to
	  <literal><replaceable>DEPTYPE</replaceable></literal>.
	  <varname><replaceable>OPT</replaceable>_<replaceable>DEPTYPE</replaceable>_OFF</varname>
	  works the same, but when <literal>OPT</literal> is
	  <emphasis>not</emphasis>
	  selected.  For example:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1
OPT1_LIB_DEPENDS=	liba.so:devel/a
OPT1_LIB_DEPENDS_OFF=	libb.so:devel/b</programlisting>

	<para>is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
LIB_DEPENDS+=	liba.so:devel/a
.else
LIB_DEPENDS+=	libb.so:devel/b
.endif</programlisting>
      </sect2>

      <sect2 xml:id="options-variables">
	<title>Generic Variables Replacement,
	  <varname><replaceable>OPT</replaceable>_<replaceable>VARIABLE</replaceable></varname>
	  and
	  <varname><replaceable>OPT</replaceable>_<replaceable>VARIABLE</replaceable>_OFF</varname></title>

	<para>For any of these variables:</para>

	<!--
	$ for i in $(make -V _OPTIONS_FLAGS:O); do printf '<listitem>\n<para><varname>%s</varname></para>\n</listitem>\n\n' $i; done
	-->

	<itemizedlist>
	  <listitem>
	    <para><varname>ALL_TARGET</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>BINARY_ALIAS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>BROKEN</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>CATEGORIES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>CFLAGS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>CONFIGURE_ENV</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>CONFLICTS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>CONFLICTS_BUILD</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>CONFLICTS_INSTALL</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>CPPFLAGS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>CXXFLAGS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>DESKTOP_ENTRIES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>DISTFILES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>EXTRACT_ONLY</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>EXTRA_PATCHES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>GH_ACCOUNT</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>GH_PROJECT</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>GH_SUBDIR</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>GH_TAGNAME</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>GH_TUPLE</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>GL_ACCOUNT</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>GL_COMMIT</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>GL_PROJECT</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>GL_SITE</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>GL_SUBDIR</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>GL_TUPLE</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>IGNORE</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>INFO</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>INSTALL_TARGET</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>LDFLAGS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>LIBS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>MAKE_ARGS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>MAKE_ENV</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>MASTER_SITES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>PATCHFILES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>PATCH_SITES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>PLIST_DIRS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>PLIST_FILES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>PLIST_SUB</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>PORTDOCS</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>PORTEXAMPLES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>SUB_FILES</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>SUB_LIST</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>TEST_TARGET</varname></para>
	  </listitem>

	  <listitem>
	    <para><varname>USES</varname></para>
	  </listitem>
	</itemizedlist>

	<para>When option <replaceable>OPT</replaceable> is
	  selected, the value of
	  <varname><replaceable>OPT</replaceable>_<replaceable>ABOVEVARIABLE</replaceable></varname>,
	  if defined, is appended to
	  <literal><replaceable>ABOVEVARIABLE</replaceable></literal>.
	  <varname><replaceable>OPT</replaceable>_<replaceable>ABOVEVARIABLE</replaceable>_OFF</varname>
	  works the same way, but when <literal>OPT</literal> is
	  <emphasis>not</emphasis>
	  selected.  For example:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1
OPT1_USES=	gmake
OPT1_CFLAGS_OFF=	-DTEST</programlisting>

	<para>is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

.if ${PORT_OPTIONS:MOPT1}
USES+=		gmake
.else
CFLAGS+=	-DTEST
.endif</programlisting>

	<note>
	  <para>Some variables are not in this list, in particular
	    <varname>PKGNAMEPREFIX</varname> and
	    <varname>PKGNAMESUFFIX</varname>.  This is intentional.  A
	    port <emphasis>must not</emphasis> change its name when
	    its option set changes.</para>
	</note>

	<warning>
	  <para>Some of these variables, at least
	    <varname>ALL_TARGET</varname>,
	    <varname>DISTFILES</varname> and
	    <varname>INSTALL_TARGET</varname>, have their default
	    values set <emphasis>after</emphasis> the options are
	    processed.</para>

	  <para>With these lines in the
	    <filename>Makefile</filename>:</para>

	  <programlisting>ALL_TARGET=	all

DOCS_ALL_TARGET=	doc</programlisting>

	  <para>If the <literal>DOCS</literal> option is enabled,
	    <varname>ALL_TARGET</varname> will have a final value of
	    <literal>all doc</literal>; if the option is disabled, it
	    would have a value of <literal>all</literal>.</para>

	  <para>With only the options helper line in the
	    <filename>Makefile</filename>:</para>

	  <programlisting>DOCS_ALL_TARGET=	doc</programlisting>

	  <para>If the <literal>DOCS</literal> option is enabled,
	    <varname>ALL_TARGET</varname> will have a final value of
	    <literal>doc</literal>; if the option is disabled, it
	    would have a value of <literal>all</literal>.</para>
	</warning>

      </sect2>

      <sect2 xml:id="options-targets">
	<title>Additional Build Targets,
	  <buildtarget><replaceable>target</replaceable>-<replaceable>OPT</replaceable>-on</buildtarget>
	  and
	  <buildtarget><replaceable>target</replaceable>-<replaceable>OPT</replaceable>-off</buildtarget></title>

	<para>These <filename>Makefile</filename> targets can accept
	  optional extra build targets:</para>

	<itemizedlist>
	  <listitem>
	    <para><buildtarget>pre-fetch</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>do-fetch</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>post-fetch</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>pre-extract</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>do-extract</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>post-extract</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>pre-patch</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>do-patch</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>post-patch</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>pre-configure</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>do-configure</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>post-configure</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>pre-build</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>do-build</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>post-build</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>pre-install</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>do-install</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>post-install</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>post-stage</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>pre-package</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>do-package</buildtarget></para>
	  </listitem>

	  <listitem>
	    <para><buildtarget>post-package</buildtarget></para>
	  </listitem>
	</itemizedlist>

	<para>When option <replaceable>OPT</replaceable> is
	  selected, the target
	  <buildtarget><replaceable>TARGET</replaceable>-<replaceable>OPT</replaceable>-on</buildtarget>,
	  if defined, is executed after
	  <buildtarget><replaceable>TARGET</replaceable></buildtarget>.
	  <buildtarget><replaceable>TARGET</replaceable>-<replaceable>OPT</replaceable>-off</buildtarget>
	  works the same way, but when <literal>OPT</literal> is
	  <emphasis>not</emphasis> selected.  For example:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1

post-patch:
	@${REINPLACE_CMD} -e 's/echo/true/' ${WRKSRC}/Makefile

post-patch-OPT1-on:
	@${REINPLACE_CMD} -e '/opt1/d' ${WRKSRC}/Makefile

post-patch-OPT1-off:
	@${REINPLACE_CMD} -e '/opt1/s|/usr/bin/|${LOCALBASE}/bin/|' ${WRKSRC}/Makefile</programlisting>

	<para>is equivalent to:</para>

	<programlisting>OPTIONS_DEFINE=	OPT1

.include &lt;bsd.port.options.mk&gt;

post-patch:
	@${REINPLACE_CMD} -e 's/echo/true/' ${WRKSRC}/Makefile
.if ${PORT_OPTIONS:MOPT1}
	@${REINPLACE_CMD} -e '/opt1/d' ${WRKSRC}/Makefile
.else
	@${REINPLACE_CMD} -e '/opt1/s|/usr/bin/|${LOCALBASE}/bin/|' ${WRKSRC}/Makefile
.endif</programlisting>
      </sect2>
    </sect1>
</chapter>
