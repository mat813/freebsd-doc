<?xml version="1.0" encoding="iso-8859-1"?>
<!--
     The FreeBSD Documentation Project

     $FreeBSD$

-->

<!--

  Document up-to date with r381632 revision of the ports tree.

  This file documents the values of the USES make variable.  The
  format is easy to grasp from the already-added entries below (or use
  this scheme below as a skeleton):

<row xml:id="uses-FEATURE">
  <entry><literal>FEATURE</literal></entry>

  <entry>ARGUMENTS</entry>

  <entry>DESCRIPTION</entry>
</row>

-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink=
  "http://www.w3.org/1999/xlink" version="5.0" xml:id="uses">

  <title xml:id="uses-values">Values of
    <varname>USES</varname></title>

  <table xml:id="uses-values-table">
    <title>Values of <varname>USES</varname></title>

    <tgroup cols="3">
      <thead>
	<row>
	  <entry>Feature</entry>

	  <entry>Arguments</entry>

	  <entry>Description</entry>
	</row>
      </thead>

      <tbody valign="top">
	<row xml:id="uses-ada">
	  <entry><literal>ada</literal></entry>

	  <entry>(none), <literal>47</literal>, <literal>49</literal>,
	    <literal>5</literal></entry>

	  <entry>Depends on an <application>Ada</application>-capable
	    compiler, and sets <varname>CC</varname> accordingly.
	    Defaults to a <application>gcc</application> 4.9 based
	    compiler, use <literal>:47</literal> to use the older
	    <application>gcc</application> 4.7 based one and
	    <literal>:5</literal> to use the newer
	    <application>gcc</application> 5 based one.</entry>
	</row>

	<row xml:id="uses-autoreconf">
	  <entry><literal>autoreconf</literal></entry>

	  <entry>(none), <literal>build</literal></entry>

	  <entry>Runs <command>autoreconf</command>.  It encapsulates
	    the <command>aclocal</command>,
	    <command>autoconf</command>,
	    <command>autoheader</command>,
	    <command>automake</command>, <command>autopoint</command>,
	    and <command>libtoolize</command> commands.  Each command
	    applies to
	    <filename>${CONFIGURE_WRKSRC}/configure.ac</filename> or
	    its old name,
	    <filename>${CONFIGURE_WRKSRC}/configure.in</filename>.  If
	    <filename>configure.ac</filename> defines subdirectories
	    with their own <filename>configure.ac</filename> using
	    <literal>AC_CONFIG_SUBDIRS</literal>,
	    <command>autoreconf</command> will recursively update
	    those as well.  The <literal>:build</literal> argument
	    only adds build time dependencies on those tools but does
	    not run <command>autoreconf</command>.</entry>
	</row>

	<row xml:id="uses-blaslapack">
	  <entry><literal>blaslapack</literal></entry>

	  <entry>(none), <literal>atlas</literal>,
	    <literal>netlib</literal> (default),
	    <literal>gotoblas</literal>,
	    <literal>openblas</literal></entry>

	  <entry>Adds dependencies on Blas / Lapack libraries.</entry>
	</row>

	<row xml:id="uses-bison">
	  <entry><literal>bison</literal></entry>

	  <entry>(none), <literal>build</literal>,
	    <literal>run</literal>, <literal>both</literal></entry>

	  <entry>Uses <package role="port">devel/bison</package>
	    By default, with no arguments or with the
	    <literal>build</literal> argument, it implies
	    <command>bison</command> is a build-time dependency,
	    <literal>run</literal> implies a run-time dependency, and
	    <literal>both</literal> implies both run-time and
	    build-time dependencies.</entry>
	</row>

	<row xml:id="uses-charsetfix">
	  <entry><literal>charsetfix</literal></entry>

	  <entry>(none)</entry>

	  <entry>Prevents the port from installing
	    <filename>charset.alias</filename>.  This must be
	    installed only by
	    <package role="port">converters/libiconv</package>.
	    <varname>CHARSETFIX_MAKEFILEIN</varname> can be set to a
	    path relative to <varname>WRKSRC</varname> if
	    <filename>charset.alias</filename> is not installed by
	    <filename>${WRKSRC}/Makefile.in</filename>.</entry>
	</row>

	<row xml:id="uses-cmake">
	  <entry><literal>cmake</literal></entry>

	  <entry>(none), <literal>outsource</literal>,
	    <literal>run</literal></entry>

	  <entry>Uses <application>CMake</application> for configuring
	    and building.  With the <literal>outsource</literal>
	    argument, an out-of-source build will be performed.  With
	    the <literal>run</literal> argument, a run-time dependency
	    is registered.  For more information see
	    <xref linkend="using-cmake"/>.</entry>
	</row>

	<row xml:id="uses-compiler">
	  <entry><literal>compiler</literal></entry>

	  <entry>(none), <literal>c++0x</literal>,
	    <literal>c++11-lang</literal>,
	    <literal>gcc-c++11-lib</literal>,
	    <literal>c++11-lib</literal>, <literal>c11</literal>,
	    <literal>openmp</literal>, <literal>nestedfct</literal>,
	    <literal>features</literal></entry>

	  <entry>Determines which compiler to use based on any given
	    wishes.  Use <literal>c++11-lang</literal> if the port
	    needs a C++11-capable compiler,
	    <literal>gcc-c++11-lib</literal> if the port needs the
	    <command>g++</command> compiler with a C++11 library, and
	    <literal>c++11-lib</literal> if the port also needs a
	    C++11-ready standard library.  If the port needs a
	    compiler understanding C++0X, C11, OpenMP, or nested
	    functions, the corresponding parameters can be used.  Use
	    <literal>features</literal> to request a list of features
	    supported by the default compiler.  After including
	    <filename>bsd.port.pre.mk</filename> the port can inspect
	    the results using these variables:

	    <itemizedlist>
	      <listitem>
		<para><varname>COMPILER_TYPE</varname>: the default
		  compiler on the system, either gcc or clang</para>
	      </listitem>

	      <listitem>
		<para><varname>ALT_COMPILER_TYPE</varname>: the
		  alternative compiler on the system, either gcc or
		  clang.  Only set if two compilers are present in the
		  base system.</para>
	      </listitem>

	      <listitem>
		<para><varname>COMPILER_VERSION</varname>: the first
		  two digits of the version of the default
		  compiler.</para>
	      </listitem>

	      <listitem>

		<para><varname>ALT_COMPILER_VERSION</varname>: the
		  first two digits of the version of the alternative
		  compiler, if present.</para>
	      </listitem>

	      <listitem>
		<para><varname>CHOSEN_COMPILER_TYPE</varname>: the
		  chosen compiler, either gcc or clang</para>
	      </listitem>

	      <listitem>
		<para><varname>COMPILER_FEATURES</varname>: the
		  features supported by the default compiler.  It
		  currently lists the C++ library.</para>
	      </listitem>
	    </itemizedlist></entry>
	</row>

	<row xml:id="uses-cpe">
	  <entry><literal>cpe</literal></entry>

	  <entry>(none)</entry>

	  <entry>
	    Include Common Platform Enumeration
	    (<acronym>CPE</acronym>) information in package manifest
	    as a <acronym>CPE</acronym> 2.3 formatted string.  See the
	    <link
	      xlink:href="http://scap.nist.gov/specifications/cpe/"><acronym>CPE</acronym>
	      specification</link> for details.  To add
	    <acronym>CPE</acronym> information to a port, follow these
	    steps:

	    <procedure>
	      <step>
		<para>Search for the official CPE entry for the
		  software product either by using the NVD's <link
		    xlink:href="http://web.nvd.nist.gov/view/cpe/search"><acronym>CPE</acronym>
		    search engine</link> or in the <link
		    xlink:href="http://static.nvd.nist.gov/feeds/xml/cpe/dictionary/official-cpe-dictionary_v2.3.xml">official
		    <acronym>CPE</acronym> dictionary</link> (warning,
		  very large <acronym>XML</acronym> file).
		  <emphasis>Do not ever make up <acronym>CPE</acronym>
		    data.</emphasis></para>
	      </step>

	      <step>
		<para>Add <literal>cpe</literal> to
		  <varname>USES</varname> and compare the result of
		  <command>make -V CPE_STR</command> to the
		  <acronym>CPE</acronym> dictionary entry.  Continue
		  one step at a time until <command>make -V
		    CPE_STR</command> is correct.</para>
	      </step>

	      <step>
		<para>If the product name (second field, defaults to
		  <varname>PORTNAME</varname>) is incorrect, define
		  <varname>CPE_PRODUCT</varname>.</para>
	      </step>

	      <step>
		<para>If the vendor name (first field, defaults to
		  <varname>CPE_PRODUCT</varname>) is incorrect, define
		  <varname>CPE_VENDOR</varname>.</para>
	      </step>

	      <step>
		<para>If the version field (third field, defaults to
		  <varname>PORTVERSION</varname>) is incorrect, define
		  <varname>CPE_VERSION</varname>.</para>
	      </step>

	      <step>
		<para>If the update field (fourth field, defaults to
		  empty) is incorrect, define
		  <varname>CPE_UPDATE</varname>.</para>
	      </step>

	      <step>
		<para>If it is still not correct, check
		  <filename>Mk/Uses/cpe.mk</filename> for additional
		  details, or contact the &a.ports-secteam;.</para>
	      </step>

	      <step>
		<para>Derive as much as possible of the
		  <acronym>CPE</acronym> name from existing variables
		  such as <varname>PORTNAME</varname> and
		  <varname>PORTVERSION</varname>.  Use variable
		  modifiers to extract the relevant portions from
		  these variables rather than hardcoding the
		  name.</para>
	      </step>

	      <step>
		<para><emphasis>Always</emphasis> run <command>make -V
		    CPE_STR</command> and check the output before
		  committing anything that changes
		  <varname>PORTNAME</varname> or
		  <varname>PORTVERSION</varname> or any other variable
		  which is used to derive
		  <varname>CPE_STR</varname>.</para>
	      </step>
	    </procedure>
	  </entry>
	</row>

	<row xml:id="uses-cran">
	  <entry><literal>cran</literal></entry>

	  <entry>(none), <literal>auto-plist</literal></entry>

	  <entry>Uses the Comprehensive R Archive Network.  Specify
	    <varname>auto-plist</varname> to automatically generate
	    <filename>pkg-plist</filename>.</entry>
	</row>

	<row xml:id="uses-desktop-file-utils">
	  <entry><literal>desktop-file-utils</literal></entry>

	  <entry>(none)</entry>

	  <entry>Uses
	    <application>update-desktop-database</application> from
	    <package role="port">devel/desktop-file-utils</package>.
	    An extra post-install step will be run without interfering
	    with any post-install steps already in the port
	    <filename>Makefile</filename>.  A line with <link
	      linkend="plist-keywords-desktop-file-utils"><literal>@desktop-file-utils</literal></link>
	    will be added to the plist.</entry>
	</row>

	<row xml:id="uses-desthack">
	  <entry><literal>desthack</literal></entry>

	  <entry>(none)</entry>

	  <entry>Changes the behavior of GNU configure to properly
	    support <varname>DESTDIR</varname> in case the original
	    software does not.</entry>
	</row>

	<row xml:id="uses-display">
	  <entry><literal>display</literal></entry>

	  <entry>(none), ARGS</entry>

	  <entry>Set up a virtual display environment.  If the
	    environment variable <varname>DISPLAY</varname> is not
	    set, then <application>Xvfb</application> is added as a
	    build dependency, and <varname>CONFIGURE_ENV</varname> is
	    extended with the port number of the currently running
	    instance of <application>Xvfb</application>.  The
	    <literal>ARGS</literal> parameter defaults to
	    <literal>install</literal> and controls the phase around
	    which to start and stop the virtual display.</entry>
	</row>

	<row xml:id="uses-dos2unix">
	  <entry><literal>dos2unix</literal></entry>

	  <entry>(none)</entry>

	  <entry>The port has files with line endings in
	    <acronym>DOS</acronym> format which need to be converted.
	    Three variables can be set to control which files will be
	    converted.  The default is to convert
	    <emphasis>all</emphasis> files, including binaries.  See
	    <xref linkend="slow-patch-automatic-replacements"/> for
	    examples.

	    <itemizedlist>
	      <listitem>
		<para><varname>DOS2UNIX_REGEX</varname>: match file
		  names based on a regular expression.</para>
	      </listitem>

	      <listitem>
		<para><varname>DOS2UNIX_FILES</varname>: match literal
		  file names.</para>
	      </listitem>

	      <listitem>
		<para><varname>DOS2UNIX_GLOB</varname>: match file
		  names based on a glob pattern.</para>
	      </listitem>
	    </itemizedlist></entry>
	</row>

	<row xml:id="uses-drupal">
	  <entry><literal>drupal</literal></entry>

	  <entry><literal>6</literal>, <literal>7</literal>,
	    <literal>module</literal>,
	    <literal>theme</literal></entry>

	  <entry>Automate installation of a port that is a
	    <application>Drupal</application>
	    theme or module.  Use with the version of Drupal that the
	    port is expecting.  For example,
	    <literal>USES=drupal:6,module</literal> says that this
	    port creates a Drupal 6 module.  A Drupal 7 theme can be
	    specified with
	    <literal>USES=drupal:7,theme</literal>.</entry>
	</row>

	<row xml:id="uses-execinfo">
	  <entry><literal>execinfo</literal></entry>

	  <entry>(none)</entry>

	  <entry>Add a library dependency on <package
	      role="port">devel/libexecinfo</package> if
	    <filename>libexecinfo.so</filename> is not present in the
	    base system.</entry>
	</row>

	<row xml:id="uses-fakeroot">
	  <entry><literal>fakeroot</literal></entry>

	  <entry>(none)</entry>

	  <entry>Changes some default behaviour of build systems to
	    allow installing as a user.  See <link
	      xlink:href="http://fakeroot.alioth.debian.org/"/> for
	    more information on <command>fakeroot</command>.</entry>
	</row>

	<row xml:id="uses-fam">
	  <entry><literal>fam</literal></entry>

	  <entry>(none), fam, gamin</entry>

	  <entry>Uses a File Alteration Monitor as a library
	    dependency, either
	    <package role="port">devel/fam</package> or
	    <package role="port">devel/gamin</package>.  End users can
	    set WITH_FAM_SYSTEM to specify their preference.</entry>
	</row>

	<row xml:id="uses-fmake">
	  <entry><literal>fmake</literal></entry>

	  <entry>(none)</entry>

	  <entry>Uses <package role="port">devel/fmake</package> as a
	    build-time dependency.</entry>
	</row>

	<row xml:id="uses-fonts">
	  <entry><literal>fonts</literal></entry>

	  <entry>(none)</entry>

	  <entry>Adds a runtime dependency on tools needed to register
	    fonts, and add an <literal><link
		linkend="plist-keywords-fcfontsdir">@fcfontsdir</link>
	      ${FONTSDIR}</literal> entry to the plist.
	    <varname>FONTSDIR</varname> defaults to
	    <filename>${PREFIX}/lib/X11/fonts/${FONTNAME}</filename>
	    and <varname>FONTNAME</varname> to
	    <literal>${PORTNAME}</literal>.</entry>
	</row>

	<row xml:id="uses-fortran">
	  <entry><literal>fortran</literal></entry>

	  <entry><literal>gcc</literal> (default),
	    <literal>ifort</literal></entry>

	  <entry>Uses the Fortran compiler from either GNU or
	    Intel.</entry>
	</row>

	<row xml:id="uses-fuse">
	  <entry><literal>fuse</literal></entry>

	  <entry>(none)</entry>

	  <entry>The port will depend on the FUSE library and handle
	    the dependency on the kernel module depending on the
	    version of &os;.</entry>
	</row>

	<row xml:id="uses-gecko">
	  <entry><literal>gecko</literal></entry>

	  <entry><literal>libxul</literal> (default),
	    <literal>firefox</literal>, <literal>seamonkey</literal>,
	    <literal>thunderbird</literal>, <literal>build</literal>,
	    <literal><replaceable>XY</replaceable></literal>,
	    <literal><replaceable>XY</replaceable>+</literal></entry>

	  <entry>Add a dependency on different
	    <application>gecko</application> based applications.  If
	    <literal>libxul</literal> is used, it is the only argument
	    allowed.  When the argument is not
	    <literal>libxul</literal>, the <literal>firefox</literal>,
	    <literal>seamonkey</literal>, or
	    <literal>thunderbird</literal> arguments can be used,
	    along with optional <literal>build</literal> and
	    <literal><replaceable>XY</replaceable></literal>/<literal><replaceable>XY</replaceable>+</literal>
	    version
	    arguments.</entry>
	</row>

	<row xml:id="uses-gettext">
	  <entry><literal>gettext</literal></entry>

	  <entry>(none)</entry>

	  <entry>Deprecated.  Will include both <link
	      linkend="uses-gettext-runtime"><literal>gettext-runtime</literal></link>
	    and <link
	      linkend="uses-gettext-tools"><literal>gettext-tools</literal></link>.</entry>
	</row>

	<row xml:id="uses-gettext-runtime">
	  <entry><literal>gettext-runtime</literal></entry>

	  <entry>(none), <literal>lib</literal> (default),
	    <literal>build</literal>, <literal>run</literal></entry>

	  <entry>Uses <package
	      role="port">devel/gettext-runtime</package>.  By
	    default, with no arguments or with the
	    <literal>lib</literal> argument, implies a library
	    dependency on <filename>libintl.so</filename>.
	    <literal>build</literal> and <literal>run</literal>
	    implies, respectively a build-time and a run-time
	    dependency on <filename>gettext</filename>.</entry>
	</row>

	<row xml:id="uses-gettext-tools">
	  <entry><literal>gettext-tools</literal></entry>

	  <entry>(none), <literal>build</literal> (default),
	    <literal>run</literal></entry>

	  <entry>Uses <package
	      role="port">devel/gettext-tools</package>.  By default,
	    with no argument, or with the <literal>build</literal>
	    argument, a build time dependency on
	    <filename>msgfmt</filename> is registered.  With the
	    <literal>run</literal> argument, a run-time dependency is
	    registered.</entry>
	</row>

	<row xml:id="uses-gmake">
	  <entry><literal>gmake</literal></entry>

	  <entry>(none), <literal>lite</literal></entry>

	  <entry>Uses <package role="port">devel/gmake</package>, or
	    <package role="port">devel/gmake-lite</package> if the
	    <literal>lite</literal> argument is used, as a
	    build-time dependency and sets up the environment to use
	    <command>gmake</command> as the default
	    <command>make</command> for the build.</entry>
	</row>

	<row xml:id="uses-gperf">
	  <entry><literal>gperf</literal></entry>

	  <entry>(none)</entry>

	  <entry>Add a buildtime dependency on <package
	      role="port">devel/gperf</package> if
	    <command>gperf</command> is not present in the base
	    system.</entry>
	</row>

	<row xml:id="uses-gssapi">
	  <entry><literal>gssapi</literal></entry>

	  <entry>(none), <literal>base</literal> (default),
	    <literal>heimdal</literal>, <literal>mit</literal>,
	    <literal>flags</literal>,
	    <literal>bootstrap</literal></entry>

	  <entry>
	    <para>Handle dependencies needed by consumers of the
	      <acronym>GSS-API</acronym>.  Only libraries that provide
	      the <application>Kerberos</application> mechanism are
	      available.  By default, or set to
	      <literal>base</literal>, the <acronym>GSS-API</acronym>
	      library from the base system is used.  Can also be set
	      to <literal>heimdal</literal> to use
	      <package role="port">security/heimdal</package>, or
	      <literal>mit</literal> to use
	      <package role="port">security/krb5</package>.</para>

	    <para>When the local <application>Kerberos</application>
	      installation is not in <varname>LOCALBASE</varname>, set
	      <varname>HEIMDAL_HOME</varname> (for
	      <literal>heimdal</literal>) or
	      <varname>KRB5_HOME</varname> (for
	      <literal>krb5</literal>) to the location of the
	      <application>Kerberos</application> installation.</para>

	    <para>These variables are exported for the ports to
	      use:</para>

	    <itemizedlist>
	      <listitem>
		<para><varname>GSSAPIBASEDIR</varname></para>
	      </listitem>

	      <listitem>
		<para><varname>GSSAPICPPFLAGS</varname></para>
	      </listitem>

	      <listitem>
		<para><varname>GSSAPIINCDIR</varname></para>
	      </listitem>

	      <listitem>
		<para><varname>GSSAPILDFLAGS</varname></para>
	      </listitem>

	      <listitem>
		<para><varname>GSSAPILIBDIR</varname></para>
	      </listitem>

	      <listitem>
		<para><varname>GSSAPILIBS</varname></para>
	      </listitem>

	      <listitem>
		<para><varname>GSSAPI_CONFIGURE_ARGS</varname></para>
	      </listitem>
	    </itemizedlist>

	    <para>The <literal>flags</literal> option can be given
	      alongside <literal>base</literal>,
	      <literal>heimdal</literal>, or <literal>mit</literal> to
	      automatically add <varname>GSSAPICPPFLAGS</varname>,
	      <varname>GSSAPILDFLAGS</varname>, and
	      <varname>GSSAPILIBS</varname> to
	      <varname>CFLAGS</varname>, <varname>LDFLAGS</varname>,
	      and <varname>LDADD</varname>, respectively.  For
	      example, use <literal>base,flags</literal>.</para>

	    <para>The <literal>bootstrap</literal> option is a special
	      prefix only for use by
	      <package role="port">security/krb5</package> and
	      <package role="port">security/heimdal</package>.  For
	      example, use <literal>bootstrap,mit</literal>.</para>

	    <example>
	      <title>Typical Use</title>

	      <programlisting>OPTIONS_SINGLE=	GSSAPI
OPTIONS_SINGLE_GSSAPI=	GSSAPI_BASE GSSAPI_HEIMDAL GSSAPI_MIT GSSAPI_NONE

GSSAPI_BASE_USES=	gssapi
GSSAPI_BASE_CONFIGURE_ON=	--with-gssapi=${GSSAPIBASEDIR} ${GSSAPI_CONFIGURE_ARGS}
GSSAPI_HEIMDAL_USES=	gssapi:heimdal
GSSAPI_HEIMDAL_CONFIGURE_ON=	--with-gssapi=${GSSAPIBASEDIR} ${GSSAPI_CONFIGURE_ARGS}
GSSAPI_MIT_USES=	gssapi:mit
GSSAPI_MIT_CONFIGURE_ON=	--with-gssapi=${GSSAPIBASEDIR} ${GSSAPI_CONFIGURE_ARGS}
GSSAPI_NONE_CONFIGURE_ON=	--without-gssapi</programlisting>
	    </example></entry>
	</row>

	<row xml:id="uses-horde">
	  <entry><literal>horde</literal></entry>

	  <entry>(none)</entry>

	  <entry>Add buildtime and runtime dependencies on <package
	      role="port">devel/pear-channel-horde</package>.  Other
	    <application>Horde</application> dependencies can be added
	    with <varname>USE_HORDE_BUILD</varname> and
	    <varname>USE_HORDE_RUN</varname>.  See <xref
	      linkend="php-horde"/> for more information.</entry>
	</row>

	<row xml:id="uses-iconv">
	  <entry><literal>iconv</literal></entry>

	  <entry>(none), <literal>lib</literal>,
	    <literal>build</literal>,
	    <literal>patch</literal>, <literal>translit</literal>,
	    <literal>wchar_t</literal></entry>

	  <entry>Uses <command>iconv</command> functions, either from
	    the port
	    <package role="port">converters/libiconv</package> as a
	    build-time and run-time dependency, or from the base
	    system on 10-CURRENT after a native
	    <command>iconv</command> was committed in
	    <revnumber>254273</revnumber>.  By default, with no
	    arguments or with the <literal>lib</literal> argument,
	    implies <command>iconv</command> with build-time and
	    run-time dependencies.  <literal>build</literal> implies a
	    build-time dependency, and <literal>patch</literal>
	    implies a patch-time dependency.  If the port uses the
	    <literal>WCHAR_T</literal> or
	    <literal>//TRANSLIT</literal> iconv extensions, add the
	    relevant arguments so that the correct iconv is used.  For
	    more information see
	    <xref linkend="using-iconv"/>.</entry>
	</row>

	<row xml:id="uses-imake">
	  <entry><literal>imake</literal></entry>

	  <entry>(none), <literal>env</literal>,
	    <literal>notall</literal>,
	    <literal>noman</literal></entry>

	  <entry>Add <package role="port">devel/imake</package> as a
	    build-time dependency and run <command>xmkmf -a</command>
	    during the <buildtarget>configure</buildtarget> stage.  If
	    the <literal>env</literal> argument is given, the
	    <buildtarget>configure</buildtarget> target is not set.
	    If the <option>-a</option> flag is a problem for the port,
	    add the <literal>notall</literal> argument.  If
	    <command>xmkmf</command> does not generate a
	    <buildtarget>install.man</buildtarget> target, add the
	    <literal>noman</literal> argument.</entry>
	</row>

	<row xml:id="uses-kmod">
	  <entry><literal>kmod</literal></entry>

	  <entry>(none)</entry>

	  <entry>Fills in the boilerplate for kernel module ports,
	    currently:

	    <itemizedlist>
	      <listitem>
		<para>Add <literal>kld</literal> to
		  <varname>CATEGORIES</varname>.</para>
	      </listitem>

	      <listitem>
		<para>Set <varname>SSP_UNSAFE</varname>.</para>
	      </listitem>

	      <listitem>
		<para>Set <varname>IGNORE</varname> if the kernel
		  sources are not found in
		  <varname>SRC_BASE</varname>.</para>
	      </listitem>

	      <listitem>
		<para>Define <varname>KMODDIR</varname> to
		  <filename>/boot/modules</filename>
		  by default, add it to <varname>PLIST_SUB</varname>
		  and <varname>MAKE_ENV</varname>, and create it upon
		  installation.  If <varname>KMODDIR</varname> is set
		  to <filename>/boot/kernel</filename>, it will be
		  rewritten to <filename>/boot/modules</filename>.  This
		  prevents breaking packages when upgrading the kernel
		  due to <filename>/boot/kernel</filename> being
		  renamed to <filename>/boot/kernel.old</filename> in
		  the process.</para>
	      </listitem>

	      <listitem>
		<para>Handle cross-referencing kernel modules upon
		  installation and deinstallation, using <link
		    linkend="plist-keywords-kld"><literal>@kld</literal></link>.</para>
	      </listitem>
	    </itemizedlist></entry>
	</row>

	<row xml:id="uses-lha">
	  <entry><literal>lha</literal></entry>
	  <entry>(none)</entry>
	  <entry>Set <varname>EXTRACT_SUFX</varname> to
	    <literal>.lzh</literal></entry>
	</row>

	<row xml:id="uses-libtool">
	  <entry><literal>libtool</literal></entry>

	  <entry>(none), <literal>keepla</literal>,
	    <literal>build</literal></entry>

	  <entry>Patches <command>libtool</command> scripts.  This
	    must be added to all ports that use
	    <command>libtool</command>.  The <literal>keepla</literal>
	    argument can be used to keep <filename>.la</filename>
	    files.  Some ports do not ship with their own copy of
	    libtool and need a build time dependency on <package
	      role="port">devel/libtool</package>, use the
	    <literal>:build</literal> argument to add such
	    dependency.</entry>
	</row>

	<row xml:id="uses-lua">
	  <entry><literal>lua</literal></entry>

	  <entry>(none),
	    <literal><replaceable>XY</replaceable>+</literal>,
	    <literal><replaceable>XY</replaceable></literal>,
	    <literal>build</literal>,
	    <literal>run</literal></entry>

	  <entry>Adds a dependency on <application>Lua</application>.
	    By default this is a library dependency, unless
	    overridden by the <literal>build</literal> or
	    <literal>run</literal> option.  The default version is
	    5.2, unless set by the
	    <literal><replaceable>XY</replaceable></literal> parameter
	    (for example, <literal>51</literal> or
	    <literal>52+</literal>).</entry>
	</row>

	<row xml:id="uses-makeinfo">
	  <entry><literal>makeinfo</literal></entry>

	  <entry><literal>build</literal> (default),
	    <literal>run</literal>, <literal>both</literal></entry>

	  <entry>Add the corresponding dependencies on
	    <command>makeinfo</command>.</entry>
	</row>

	<row xml:id="uses-makeself">
	  <entry><literal>makeself</literal></entry>

	  <entry>(none)</entry>

	  <entry>Indicates that the distribution files are makeself
	    archives and sets the appropriate dependencies.</entry>
	</row>

	<row xml:id="uses-metaport">
	  <entry><literal>metaport</literal></entry>

	  <entry>(none)</entry>

	  <entry>Sets the following variables to make it easier to
	    create a metaport: <varname>MASTER_SITES</varname>,
	    <varname>DISTFILES</varname>,
	    <varname>EXTRACT_ONLY</varname>,
	    <varname>NO_BUILD</varname>, <varname>NO_INSTALL</varname>,
	    <varname>NO_MTREE</varname>, <varname>NO_ARCH</varname>.
	  </entry>
	</row>

	<row xml:id="uses-mono">
	  <entry><literal>mono</literal></entry>

	  <entry>(none)</entry>

	  <entry>Adds a dependency on the
	    <application>Mono</application> (currently only C#)
	    framework by setting the appropriate dependencies.</entry>
	</row>

	<row xml:id="uses-motif">
	  <entry><literal>motif</literal></entry>

	  <entry>(none)</entry>

	  <entry>Uses
	    <package role="port">x11-toolkits/open-motif</package> as
	    a library dependency.  End users can set
	    <varname>WANT_LESSTIF</varname> for the dependency to be
	    on <package role="port">x11-toolkits/lesstif</package>
	    instead of <package
	      role="port">x11-toolkits/open-motif</package>.</entry>
	</row>

	<row xml:id="uses-ncurses">
	  <entry><literal>ncurses</literal></entry>

	  <entry>(none), <literal>base</literal>,
	    <literal>port</literal></entry>

	  <entry>Uses <application>ncurses</application>, and causes
	    some useful variables to be set.</entry>
	</row>

	<row xml:id="uses-ninja">
	  <entry><literal>ninja</literal></entry>

	  <entry>(none)</entry>

	  <entry>Uses <application>ninja</application> to build the
	    port.  End users can set <varname>NINJA_VERBOSE</varname>
	    for verbose output.</entry>
	</row>

	<row xml:id="uses-objc">
	  <entry><literal>objc</literal></entry>

	  <entry>(none)</entry>

	  <entry>Add objective C dependencies (compiler, runtime
	    library) if the base system does not support it.</entry>
	</row>

	<row xml:id="uses-openal">
	  <entry><literal>openal</literal></entry>

	  <entry><literal>al</literal>, <literal>soft</literal>
	    (default), <literal>si</literal>,
	    <literal>alut</literal></entry>

	  <entry>Uses <application>OpenAL</application>.  The backend
	    can be specified, with the software implementation as the
	    default.  The user can specify a preferred backend with
	    <varname>WANT_OPENAL</varname>.  Valid values for
	    this knob are <literal>soft</literal> (default) and
	    <literal>si</literal>.</entry>
	</row>

	<row xml:id="uses-pathfix">
	  <entry><literal>pathfix</literal></entry>

	  <entry>(none)</entry>

	  <entry>Look for <filename>Makefile.in</filename> and
	    <filename>configure</filename> in the port's
	    associated sources and fix common paths to make sure they
	    respect the &os; hierarchy.  If the port uses
	    <command>automake</command>, set
	    <varname>PATHFIX_MAKEFILEIN</varname> to
	    <filename>Makefile.am</filename> if needed.</entry>
	</row>

	<row xml:id="uses-pear">
	  <entry><literal>pear</literal></entry>

	  <entry>(none)</entry>

	  <entry>Adds a dependency on <package
	      role="port">devel/pear</package>.  It will setup default
	    behavior for software using the
	    <application>PHP</application> Extension and Application
	    Repository.  See <xref linkend="php-pear"/> for more
	    information.</entry>
	</row>

	<row xml:id="uses-perl5">
	  <entry><literal>perl5</literal></entry>

	  <entry>(none)</entry>

	  <entry>Depends on <application>Perl</application>.  These
	    variables can be set:

	    <itemizedlist>
	      <listitem>
		<para><varname>PERL_VERSION</varname>: Full version of
		  <application>Perl</application> to use, or the
		  default if not set</para>
	      </listitem>

	      <listitem>
		<para><varname>PERL_ARCH</varname>: Directory name of
		  architecture dependent libraries, defaults to
		  <filename>mach</filename></para>
	      </listitem>

	      <listitem>
		<para><varname>PERL_PORT</varname>: Name of the
		  <application>Perl</application> port to be
		  installed, the default is derived from
		  <varname>PERL_VERSION</varname></para>
	      </listitem>

	      <listitem>
		<para><varname>SITE_PERL</varname>: Directory name for
		  site specific <application>Perl</application>
		  packages</para>
	      </listitem>

	      <listitem>
		<para><varname>USE_PERL5</varname>: Phases in which to
		  use <application>Perl</application>, can be
		  <literal>extract</literal>,
		  <literal>patch</literal>, <literal>build</literal>,
		  <literal>install</literal>, or
		  <literal>run</literal>.  It can also be
		  <literal>configure</literal>,
		  <literal>modbuild</literal>, or
		  <literal>modbuildtiny</literal> when
		  <filename>Makefile.PL</filename>,
		  <filename>Build.PL</filename>, or the
		  Module::Build::Tiny flavor of
		  <filename>Build.PL</filename> is required.  It
		  defaults to <literal>build run</literal>.</para>
	      </listitem>
	    </itemizedlist></entry>
	</row>

	<row xml:id="uses-pgsql">
	  <entry><literal>pgsql</literal></entry>

	  <entry>(none),
	    <literal><replaceable>X.Y</replaceable></literal>,
	    <literal><replaceable>X.Y</replaceable>+</literal>,
	    <literal><replaceable>X.Y</replaceable>-</literal></entry>

	  <entry>
	    <para>Provide support for PostgreSQL.  Maintainer can
	      set version required.  Minimum and maximum versions can
	      be specified; for example, 9.0-, 8.4+.</para>

	    <para>Add PostgreSQL component dependency, using
	      <literal>WANT_PGSQL=component[:target]</literal>.  for example,
	      <literal>WANT_PGSQL=server:configure pltcl
		plperl</literal>  For the full list use
	      <command>make -V _USE_PGSQL_DEP</command>.</para>
	  </entry>
	</row>

	<row xml:id="uses-pkgconfig">
	  <entry><literal>pkgconfig</literal></entry>

	  <entry>(none), <literal>build</literal> (default),
	    <literal>run</literal>, <literal>both</literal></entry>

	  <entry>Uses <package role="port">devel/pkgconf</package>.
	    With no arguments or with the <literal>build</literal>
	    argument, it implies <command>pkg-config</command> as a
	    build-time dependency.  <literal>run</literal> implies a
	    run-time dependency and <literal>both</literal> implies
	    both run-time and build-time dependencies.</entry>
	</row>

	<row xml:id="uses-pure">
	  <entry><literal>pure</literal></entry>

	  <entry>(none), <literal>ffi</literal></entry>

	  <entry>Uses <package role="port">lang/pure</package>.
	    Largely used for building related
	    <application>pure</application> ports.  With the
	    <literal>ffi</literal> argument, it implies
	    <package role="port">devel/pure-ffi</package> as a
	    run-time dependency.</entry>
	</row>

	<row xml:id="uses-python">
	  <entry><literal>python</literal></entry>
	  <entry>(none),
        <literal><replaceable>X.Y</replaceable></literal>,
	    <literal><replaceable>X.Y+</replaceable></literal>,
        <literal><replaceable>-X.Y</replaceable></literal>,
        <literal><replaceable>X.Y-Z.A</replaceable></literal>,
        <literal>build</literal>,
	    <literal>run</literal>
      </entry>
	  <entry>Uses <application>Python</application>. A supported
	    version or version range can be specified. If Python is
	    only needed at build or run time, it can be set as a build
	    or run dependency with <literal>build</literal> or
	    <literal>run</literal>. See <xref linkend="using-python"/>
            for more information.</entry>
	</row>

	<row xml:id="uses-qmail">
	  <entry><literal>qmail</literal></entry>

	  <entry>(none), <literal>build</literal>,
	    <literal>run</literal>,
	    <literal>both</literal>, <literal>vars</literal></entry>

	  <entry>Uses <package role="port">mail/qmail</package>.  With
	    the <literal>build</literal> argument, it implies
	    <command>qmail</command> as a build-time dependency.
	    <literal>run</literal> implies a run-time dependency.
	    Using no argument or the <literal>both</literal> argument
	    implies both run-time and build-time dependencies.
	    <literal>vars</literal> will only set QMAIL variables for
	    the port to use.</entry>
	</row>

	<row xml:id="uses-qmake">
	  <entry><literal>qmake</literal></entry>

	  <entry>(none), <literal>norecursive</literal>,
	    <literal>outsource</literal></entry>

	  <entry>Uses <application>QMake</application> for
	    configuring.  For more information see
	    <xref linkend="using-qmake"/>.</entry>
	</row>

	<row xml:id="uses-readline">
	  <entry><literal>readline</literal></entry>

	  <entry>(none), <literal>port</literal></entry>

	  <entry>Uses <application>readline</application> as a library
	    dependency, and sets <varname>CPPFLAGS</varname> and
	    <varname>LDFLAGS</varname> as necessary.  If the
	    <literal>port</literal> argument is used or if readline
	    is not present in the base system, add a dependency on
	    <package role="port">devel/readline</package></entry>
	</row>

	<row xml:id="uses-scons">
	  <entry><literal>scons</literal></entry>

	  <entry>(none)</entry>

	  <entry>Provide support for the use of
	    <package role="port">devel/scons</package></entry>
	</row>

	<row xml:id="uses-shared-mime-info">
	  <entry><literal>shared-mime-info</literal></entry>

	  <entry>(none)</entry>

	  <entry>Uses <application>update-mime-database</application>
	    from <package role="port">misc/shared-mime-info</package>.
	    This uses will automatically add a post-install step in
	    such a way that the port itself still can specify there
	    own post-install step if needed.  It also add an <link
	      linkend="plist-keywords-shared-mime-info"><literal>@shared-mime-info</literal></link>
	    entry to the plist.</entry>
	</row>

	<row xml:id="uses-shebangfix">
	  <entry><literal>shebangfix</literal></entry>

	  <entry>(none)</entry>

	  <entry>A lot of software uses incorrect locations for script
	    interpreters, most notably
	    <filename>/usr/bin/perl</filename> and
	    <filename>/bin/bash</filename>.  This fixes shebang lines
	    in scripts listed in <varname>SHEBANG_FILES</varname>.
	    Currently <application>Bash</application>,
	    <application>Java</application>,
	    <application>Ksh</application>,
	    <application>Perl</application>,
	    <application>PHP</application>,
	    <application>Python</application>,
	    <application>Ruby</application>,
	    <application>Tcl</application>, and
	    <application>Tk</application> are supported by default.
	    To support another interpreter, set
	    <varname>SHEBANG_LANG</varname>,
	    <varname>lua_OLD_CMD</varname> and
	    <varname>lua_CMD</varname>.  For example
	    <literal>SHEBANG_LANG=lua</literal>, then
	    <varname>lua_OLD_CMD=/usr/bin/lua</varname> and
	    <varname>lua_CMD=${LOCALBASE}/bin/lua</varname>.</entry>
	</row>

	<row xml:id="uses-tar">
	  <entry><literal>tar</literal></entry>

	  <entry>(none), <literal>Z</literal>, <literal>bz2</literal>,
	    <literal>bzip2</literal>, <literal>lzma</literal>,
	    <literal>tbz</literal>, <literal>tgz</literal>,
	    <literal>txz</literal>, <literal>xz</literal></entry>

	  <entry>Set <varname>EXTRACT_SUFX</varname> to
	    <literal>.tar</literal>, <literal>.tar.Z</literal>,
	    <literal>.tar.bz2</literal>, <literal>.tar.bz2</literal>,
	    <literal>.tar.lzma</literal>, <literal>.tbz</literal>,
	    <literal>.tgz</literal>, <literal>.txz</literal> or
	    <literal>.tar.xz</literal> respectively.</entry>
	</row>

	<row xml:id="uses-tcl">
	  <entry><literal>tcl</literal></entry>

	  <entry><literal>PORT</literal></entry>

	  <entry>Add a dependency on <application>Tcl</application>.
	    The <literal>PORT</literal> parameter can be either
	    <literal>tcl</literal> or <literal>tk</literal>.  Either a
	    version or wrapper dependency can be appended using
	    <literal>PORT:version</literal> or
	    <literal>PORT:wrapper</literal>.  The version can be
	    empty, one or more exact version numbers (currently
	    <literal>84</literal>, <literal>85</literal>, or
	    <literal>86</literal>), or a minimal version number
	    (currently <literal>84+</literal>, <literal>85+</literal>
	    or <literal>86+</literal>).  A build- or run-time only
	    dependency can be specified using
	    <literal>PORT,build</literal> or
	    <literal>PORT,run</literal>.  After including
	    <filename>bsd.port.pre.mk</filename> the port can inspect
	    the results using these variables:

	    <itemizedlist>
	      <listitem>
		<para><varname>TCL_VER</varname>: chosen major.minor
		  version of <application>Tcl</application></para>
	      </listitem>

	      <listitem>
		<para><varname>TCLSH</varname>: full path of the
		  <application>Tcl</application> interpreter</para>
	      </listitem>

	      <listitem>
		<para><varname>TCL_LIBDIR</varname>: path of the
		  <application>Tcl</application> libraries</para>
	      </listitem>

	      <listitem>
		<para><varname>TCL_INCLUDEDIR</varname>: path of the
		  <application>Tcl</application> C header files</para>
	      </listitem>

	      <listitem>
		<para><varname>TK_VER</varname>: chosen major.minor
		  version of <application>Tk</application></para>
	      </listitem>

	      <listitem>
		<para><varname>WISH</varname>: full path of the
		  <application>Tk</application> interpreter</para>
	      </listitem>

	      <listitem>
		<para><varname>TK_LIBDIR</varname>: path of the
		  <application>Tk</application> libraries</para>
	      </listitem>

	      <listitem>
		<para><varname>TK_INCLUDEDIR</varname>: path of the
		  <application>Tk</application> C header files</para>
	      </listitem>
	    </itemizedlist></entry>
	</row>

	<row xml:id="uses-tk">
	  <entry><literal>tk</literal></entry>

	  <entry>Same as arguments for <literal>tcl</literal></entry>

	  <entry>Small wrapper when using both
	    <application>Tcl</application> and
	    <application>Tk</application>.  The same variables are
	    returned as when using
	    <application>Tcl</application>.</entry>
	</row>

	<row xml:id="uses-twisted">
	  <entry><literal>twisted</literal></entry>

	  <entry>(none), <literal>ARGS</literal></entry>

	  <entry>Add a dependency on
	    <application>twistedCore</application>.  The list of
	    required components can be specified as a value of this
	    variable.  <literal>ARGS</literal> can be one of:

	    <itemizedlist>
	      <listitem>
		<para><literal>build</literal>: add
		  <application>twistedCore</application> or any
		  specified component as build dependency.</para>
	      </listitem>

	      <listitem>
		<para><literal>run</literal>: add
		  <application>twistedCore</application> or any
		  specified component as run dependency.</para>
	      </listitem>
	    </itemizedlist>

	    Besides <literal>build</literal> and
	    <literal>run</literal>, one or more other supported
	    <application>twisted</application> components can be
	    specified.  Supported values are listed in
	    <filename>Uses/twisted.mk</filename>.</entry>
	</row>

	<row xml:id="uses-uidfix">
	  <entry><literal>uidfix</literal></entry>

	  <entry>(none)</entry>

	  <entry>Changes some default behavior (mostly variables) of
	    the build system to allow installing this port as a normal
	    user.  Try this in the port before adding
	    <literal>NEED_ROOT=yes</literal></entry>
	</row>

	<row xml:id="uses-uniquefiles">
	  <entry><literal>uniquefiles</literal></entry>

	  <entry>(none), <literal>dirs</literal></entry>

	  <entry>Make files or directories 'unique', by adding a
	    prefix or suffix.  If the <literal>dirs</literal> argument
	    is used, the port needs a prefix (a only a prefix) based
	    on <varname>UNIQUE_PREFIX</varname> for standard
	    directories <varname>DOCSDIR</varname>,
	    <varname>EXAMPLESDIR</varname>,
	    <varname>DATADIR</varname>, <varname>WWWDIR</varname>,
	    <varname>ETCDIR</varname>.  These variables are
	    available for ports:

	    <itemizedlist>
	      <listitem>
		<para><varname>UNIQUE_PREFIX</varname>: The prefix to
		  be used for directories and files.  Default:
		  <varname>${PKGNAMEPREFIX}</varname>.</para>
	      </listitem>

	      <listitem>
		<para><varname>UNIQUE_PREFIX_FILES</varname>: A list
		  of files that need to be prefixed.  Default:
		  empty.</para>
	      </listitem>

	      <listitem>
		<para><varname>UNIQUE_SUFFIX</varname>: The suffix to
		  be used for files.  Default:
		  <varname>${PKGNAMESUFFIX}</varname>.</para>
	      </listitem>

	      <listitem>
		<para><varname>UNIQUE_SUFFIX_FILES</varname>: A list
		  of files that need to be suffixed.  Default:
		  empty.</para>
	      </listitem>
	    </itemizedlist></entry>
	</row>

	<row xml:id="uses-webplugin">
	  <entry><literal>webplugin</literal></entry>

	  <entry>(none), <literal>ARGS</literal></entry>

	  <entry>Automatically create and remove symbolic links for
	    each application that supports the webplugin framework.
	    <literal>ARGS</literal> can be one of:

	    <itemizedlist>
	      <listitem>
		<para><literal>gecko</literal>: support plug-ins based
		  on Gecko</para>
	      </listitem>

	      <listitem>
		<para><literal>native</literal>: support plug-ins for
		  Gecko, Opera, and WebKit-GTK</para>
	      </listitem>

	      <listitem>
		<para><literal>linux</literal>: support Linux
		  plug-ins</para>
	      </listitem>

	      <listitem>
		<para><literal>all</literal> (default, implicit):
		  support all plug-in types</para>
	      </listitem>

	      <listitem>
		<para>(individual entries): support only the browsers
		  listed</para>
	      </listitem>
	    </itemizedlist>

	    These variables can be adjusted:

	    <itemizedlist>
	      <listitem>
		<para><varname>WEBPLUGIN_FILES</varname>: No default,
		  must be set manually.  The plug-in files to
		  install.</para>
	      </listitem>

	      <listitem>
		<para><varname>WEBPLUGIN_DIR</varname>: The directory
		  to install the plug-in files to, default
		  <filename><replaceable>PREFIX</replaceable>/lib/browser_plugins/<replaceable>WEBPLUGIN_NAME</replaceable></filename>.
		  Set this if the port installs plug-in files outside
		  of the default directory to prevent broken symbolic
		  links.</para>
	      </listitem>

	      <listitem>
		<para><varname>WEBPLUGIN_NAME</varname>: The final
		  directory to install the plug-in files into, default
		  <varname>PKGBASE</varname>.</para>
	      </listitem>
	    </itemizedlist></entry>
	</row>

	<row xml:id="uses-xfce">
	  <entry><literal>xfce</literal></entry>

	  <entry>(none), <literal>gtk3</literal></entry>

	  <entry>
	    <para>Provide support for <application>Xfce</application>
	      related ports.  See <xref linkend="using-xfce"/> for
	      details.</para>

	    <para>The <literal>gtk3</literal> argument specifies that
	      the port requires <application>GTK3</application>
	      features provided by <package
		role="port">x11/libxfce4menu</package>.</para>
	  </entry>
	</row>

	<row xml:id="uses-zip">
	  <entry><literal>zip</literal></entry>

	  <entry>(none), <literal>infozip</literal></entry>

	  <entry>Indicates that the distribution files use the ZIP
	    compression algorithm.  For files using the InfoZip
	    algorithm the <literal>infozip</literal> argument must be
	    passed to set the appropriate dependencies.</entry>
	</row>

	<row xml:id="uses-zope">
	  <entry><literal>zope</literal></entry>

	  <entry>(none)</entry>

	  <entry>Uses <package role="port">www/zope</package>.  Mostly
	    used for building <application>zope</application> related
	    ports.  <varname>ZOPE_VERSION</varname> can be used by a
	    port to indicate that a specific version of
	    <application>zope</application> shall be used.</entry>
	</row>
      </tbody>
    </tgroup>
  </table>
</chapter>
