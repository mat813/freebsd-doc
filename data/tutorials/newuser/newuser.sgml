<!DOCTYPE linuxdoc PUBLIC "-//FreeBSD//DTD linuxdoc//EN">
<!-- $Id: newuser.sgml,v 1.2 1996-10-06 20:17:19 jfieber Exp $ -->

<article>
<title>For People New to Both FreeBSD <em>and</em> Unix
<author>Annelise Anderson
    <htmlurl url="mailto:andrsn@hoover.stanford.edu"
             name="&lt;andrsn@hoover.stanford.edu&gt;">
<date>June 30, 1996

<abstract>Congratulations on installing FreeBSD!
This introduction is for people new to both FreeBSD
<em>and</em> Un*x---so it starts with basics.  It assumes you're using
version 2.0.5 or later of FreeBSD as distributed by Walnut Creek
or FreeBSD.ORG, your system (for now) has a single user
(you)---and you're probably pretty good with DOS/Windows or OS/2.
</abstract>

<toc>

<!-- ************************************************************ -->
<sect>Logging in and Getting Out

<p>Log in (when you see <tt>login:</tt>) as a user you created during
installation or as <em>root</em>.  (Your FreeBSD installation will already
have an account for root; root can go anywhere and do anything,
including deleting essential files, so be careful!)

To log out (and get a new <tt>login</tt> prompt) type
<tscreen>
exit
</tscreen>
as often as necessary.  Yes, press <em>enter</em> after commands, and remember
that Unix is case-sensitive---<tt>exit</tt>, not <tt>EXIT</tt>.

To shut down the machine type:
<tscreen>
/sbin/shutdown -h now
</tscreen>
Or to reboot type
<tscreen>
/sbin/shutdown -r now
</tscreen>
or
<tscreen>
/sbin/reboot
</tscreen>
You can also reboot with
<tt>Ctrl-Alt-Delete</tt>.  Give it a little time to do its work.  This is
equivalent to <tt>/sbin/reboot</tt> in recent releases of FreeBSD, and is
much, much better than hitting the reset button.  You don't want to
have to reinstall this thing, do you?

<!-- ************************************************************ -->
<sect>Adding A User with Root Privileges

<p>If you didn't create any users when you installed the system and
are thus logged in as root, you should probably create a user now with
<tscreen>
adduser
</tscreen>
Don't use the <tt>-verbose</tt> option; the defaults are what you
want.  Suppose you create a user <em>jack</em> with full name
<em>Jack Benimble</em>.  Give jack a password if security (even
kids around who might pound on the keyboard) is an issue.  When
it asks you if you want to invite jack into other groups, type
<tscreen>
wheel
</tscreen>
This will make it possible to log in as <em>jack</em> and use the <tt>su</tt> command to
become root.  Then you won't get scolded any more for logging in as
root, and as root you'll have the same environment as jack
(this is good).

You can quit <tt>adduser</tt> any time by typing <tt>Ctrl-C</tt>, and at the end
you'll have a chance to approve your new user or simply type <tt>n</tt> for no.
You might want to create a second newuser (jill?) so that when you edit
jack's login files, you'll have a hot spare in case something goes wrong.

Once you've done this, use <tt>exit</tt> to get back to a login prompt and log
in as <em>jack</em>.  In general, it's a good idea to do as
much work as possible as an ordinary user who doesn't have the
power---and risk---of root.

If you already created a user and you want the user to be able to <tt>su</tt>
to root, you can log in as root and edit the file <tt>/etc/group</tt>, adding
jack to the first line (the group wheel).  But first you need to
practice <tt>vi</tt>, the text editor.

<!-- ************************************************************ -->
<sect>Looking Around

<p>Logged in as an ordinary user, look around and try out some commands that
will access the sources of help and information within FreeBSD.

Here are some commands and what they do:
<descrip>
<tag/<tt>id</tt>/        Tells you who you are!
<tag/<tt>pwd</tt>/       Shows you where you are---the current
                         working directory.
<tag/<tt>ls</tt>/        Lists the files in the current directory.
<tag/<tt>ls -F</tt>/        Lists the files in the current directory
                with a * after
                executables, a / after directories, and an @ after symbolic
                links.
<tag/<tt>ls -l</tt>/        Lists the files in long format---size,
                         date, permissions.
<tag/<tt>ls -a</tt>/        Lists hidden (unless you're root) ``dot''
                         files with the others.
<tag/<tt>cd</tt>/        Changes directories.  <tt>cd ..</tt> backs up
                         one level; note the
                space after <tt>cd</tt>.  <tt>cd /usr/local</tt>
                goes there.  <tt>cd ~</tt>  goes to
                the home directory of the person logged in---e.g.,
                <tt>/usr/home/jack</tt>.  Try <tt>cd /cdrom</tt>,
                and then <tt>ls</tt>, to find out
                if your CDROM is mounted and working.
<tag/<tt>view <em>filename</em></tt>/
                Lets you look at a file (named <em>filename</em>
                without changing
                it.  Try <tt>view /etc/fstab</tt>.  <tt>:q</tt> to quit.
<tag/<tt>cat <em>filename</em></tt>/
                Displays <em>filename</em> on screen.  If it's too long and you
                can see only the end of it, press <tt>ScrollLock</tt> and use
                the <tt>up-arrow</tt> to move backward; you can
                use <tt>ScrollLock</tt> with
                man pages too.  Press <tt>ScrollLock</tt> again
                to quit scrolling.
                You might want to try <tt>cat</tt> on some of the
                dot files in your
                home directory---<tt>cat .cshrc</tt>, <tt>cat .login</tt>,
                <tt>cat .profile</tt>.
</descrip>
You'll notice aliases in <tt>.cshrc</tt>
for some of the <tt>ls</tt> commands (they're very convenient).  You can create
other aliases by editing <tt>.cshrc</tt>. You can make these aliases
available to all users on the system by putting them in the system-wide
csh configuration file, <em>/etc/csh.cshrc</em>.

<!-- ************************************************************ -->
<sect>Getting Help and Information

<p>Here are some useful sources of help.  ``text'' stands for something of
your choice that you type in---usually a command or filename.
<descrip>
<tag/<tt>apropos <em>text</em></tt>/
                Everything containing string <em>text</em>
                in the whatis database.
<tag/<tt>man <em>text</em></tt>/
                The man page for <em>text</em>.
                The major source of documentation
                for Un*x systems.  <tt>man ls</tt> will tell you
                all the ways to
                use the <tt>ls</tt> command. Press <tt>Enter</tt> to
                move through text, <tt>Ctrl-b</tt>
                to go back a page, <tt>Ctrl-f</tt> to go forward,
                <tt>q</tt> or <tt>Ctrl-c</tt> to quit.
<tag/<tt>which <em>text</em></tt>/
                Tells you where in the user's path the command
                <em>text</em> is found.
<tag/<tt>locate <em>text</em></tt>/
                All the paths where the string <tt>text</tt> is found.
<tag/<tt>whatis <em>text</em></tt>/
                Tells you what the command <tt>text</tt> does and its man page.
<tag/<tt>whereis <em>text</em></tt>/
                Finds the file <em>text</em>, giving its full path.
</descrip>

You might want to try using <tt>whatis</tt> on some common useful
commands like <tt>cat</tt>, <tt>more</tt>, <tt>grep</tt>,
<tt>mv</tt>, <tt>find</tt>, <tt>tar</tt>, <tt>chmod</tt>,
<tt>chown</tt>, <tt>date</tt>, and <tt>script</tt>.
<tt>more</tt> lets you read a page at a time as it does in DOS,
e.g., <tt>ls -l | more</tt> or <tt>more <em>filename</em></tt>.  The
<tt>*</tt> works as a wildcard---e.g., <tt>ls w*</tt> will show
you files beginning with w.

Are some of these not working very well?  Both <tt>locate</tt>
and <tt>whatis</tt> depend on a database that's rebuilt weekly.
If your machine isn't going to be left on over the weekend (and
running FreeBSD), you might want to run the commands for daily,
weekly, and monthly maintenance now and then.  Run them as root
and give each one time to finish before you start the next one,
for now.
<tscreen>
/etc/daily<newline>
/etc/weekly<newline>
/etc/monthly
</tscreen>
If you get tired waiting, press <tt>Alt-F2</tt> to get another
virtual console, and log in again.  After all, it's a multi-user,
multi-tasking system.  Nevertheless these commands will probably
flash messages on your screen while they're running; you can type
<tt>clear</tt> at the prompt to clear the screen.  Once they've run, you
might want to look at <tt>/var/mail/root</tt> and
<tt>/var/log/messages</tt>.

Basically running such commands is part of system administration---and as
a single user of a Unix system, you're your own system administrator.
Virtually everything you need to be root to do is system administration.
Such responsibilities aren't covered very well even in those big fat books
on Unix, which seem to devote a lot of space to pulling down menus in
windows managers.  You might want to get one of the two leading books
on systems administration, either Evi Nemeth et.al.'s <em>UNIX System
Administration Handbook</em> (Prentice-Hall, 1995, ISBN 0-13-15051-7)---the
second edition with the red cover; or &AElig;leen Frisch's <em>Essential System
Administration</em> (O'Reilly &amp; Associates, 1993, ISBN 0-937175-80-3).
I used Nemeth.

<!-- ************************************************************ -->
<sect>Editing Text

<p>To configure your system, you need to edit text files.  Most
of them will be in the <tt>/etc</tt> directory; and you'll need
to <tt>su</tt> to root to be able to change them.  The text
editor is <tt>vi</tt>.  Before you edit a file, you should
probably back it up.  Suppose you want to edit
<tt>/etc/sysconfig</tt>.  You could just use <tt>cd /etc</tt> to
get to the <tt>/etc</tt> directory and do:
<tscreen>
cp sysconfig sysconfig.orig
</tscreen>
This would copy <tt>sysconfig</tt> to <tt>sysconfig.orig</tt>,
and you could later copy <tt>sysconfig.orig</tt> to
<tt>sysconfig</tt> to recover the original.  But even better
would be moving (renaming) and then copying back:
<tscreen>
mv sysconfig sysconfig.orig<newline>
cp sysconfig.orig sysconfig
</tscreen>
because the <tt>mv</tt> command preserves the original date and
owner of the file.  You can now edit <tt>sysconfig</tt>.  If you
want the original back, you'd then <tt>mv sysconfig syconfig.myedit</tt>
(assuming you want to preserve your edited version) and then
<tscreen>
mv sysconfig.orig sysconfig
</tscreen>
to put things back the way they were.

To edit a file, type
<tscreen>
vi filename
</tscreen>
Move through the text with the arrow keys.  <tt>Esc</tt> (the
escape key) puts <tt>vi</tt> in command mode.  Here are some
commands:
<descrip>
        <tag/<tt>x</tt>/    delete letter the cursor is on
        <tag/<tt>dd</tt>/   delete the entire line (even if
                            it wraps on the screen)
        <tag/<tt>i</tt>/    insert text at the cursor
        <tag/<tt>a</tt>/    insert text after the cursor
</descrip>
Once you type <tt>i</tt> or <tt>a</tt>, you can enter text.
<tt>Esc</tt> puts you back in command mode where you can type
<descrip>
        <tag/<tt>:w</tt>/   to write your changes to disk and continue editing
        <tag/<tt>:wq</tt>/  to write and quit
        <tag/<tt>:q!</tt>/  to quit without saving changes
        <tag><tt>/<em>text</em></tt></tag> to move the cursor
                        to <em>text</em>; <tt>/Enter</tt> (the enter
                        key) to find the next instance of <em>text</em>.
        <tag/<tt>G</tt>/    to go to the end of the file
        <tag/<tt><em>n</em>G</tt>/   to go to line <em>n</em> in
                        the file, where <em>n</em> is a number
        <tag/<tt>Ctrl-L</tt>/ to redraw the screen
        <tag/<tt>Ctrl-b</tt> and <tt>Ctrl-f</tt>/ go back
                        and forward a screen, as they
                        do with <tt>more</tt> and <tt>view</tt>.
</descrip>

Practice with <tt>vi</tt> in your home directory by creating a
new file with <tt>vi filename</tt> and adding and deleting text,
saving the file, and calling it up again.  <tt>vi</tt> delivers
some surprises because it's really quite complex, and sometimes
you'll inadvertently issue a command that will do something you
don't expect.  (Some people actually like <tt>vi</tt>---it's more
powerful than DOS EDIT---find out about the <tt>:r</tt> command.)
Use <tt>Esc</tt> one or more times to be sure you're in command
mode and proceed from there when it gives you trouble, save often
with <tt>:w</tt>, and use <tt>:q!</tt> to get out and start over
(from your last <tt>:w</tt>) when you need to.

Now you can <tt>cd</tt> to <tt>/etc</tt>, <tt>su</tt> to root,
use <tt>vi</tt> to edit the file <tt>/etc/group</tt>, and add a
user to wheel so the user has root privileges.  Just add a comma
and the user's login name to the end of the first line in the
file, press <tt>Esc</tt>, and use <tt>:wq</tt> to write the file
to disk and quit.  Instantly effective.  (You didn't put a space
after the comma, did you?)

<!-- ************************************************************ -->
<sect>Printing Files from DOS

<p>At this point you probably don't have the printer working, so here's a
way to create a file from a man page, move it to a floppy, and then
print it from DOS.  Suppose you want to read carefully about changing
permissions on files (pretty important).  You can use the command
man chmod to read about it.  The command
<tscreen>
man chmod &gt; chmod.txt
</tscreen>
will send the man page to the <tt>chmod.txt</tt> file instead of showing it on
your screen.  Now put a dos-formatted diskette in your floppy drive a,
<tt>su</tt> to root, and type
<tscreen>
/sbin/mount -t msdos /dev/fd0 /mnt
</tscreen>
to mount the floppy drive on <tt>/mnt</tt>.

Now (you no longer need to be root, and you can type <tt>exit</tt> to get
back to being user jack) you can go to the directory where you created
chmod.txt and copy the file to the floppy with:
<tscreen>
cp chmod.txt /mnt
</tscreen>
and use <tt>ls /mnt</tt> to get a directory listing of
<tt>/mnt</tt>, which should show the file <tt>chmod.txt</tt>.

You might especially want to make a file from <tt>/sbin/dmesg</tt> by typing
<tscreen>
/sbin/dmesg &gt; dmesg.txt
</tscreen>
and copying <tt>dmesg.txt</tt> to the floppy.  <tt>/sbin/dmesg</tt> is the boot
 log record,
and it's useful to understand it because it shows what FreeBSD found
when it booted up.  If you ask questions on questions@freebsd.org or on
a USENET group---like ``FreeBSD isn't finding my tape drive, what do I
do?''---people will want to know what <tt>dmesg</tt> has to say.

You can now dismount the floppy drive (as root) to get the disk out with
<tscreen>
/sbin/umount /mnt
</tscreen>
or reboot to go to DOS.  Copy these files to a DOS directory, call them
up with DOS EDIT, Windows Notepad, or a word processor, make a minor
change so the file has to be saved, and print as you normally would
from DOS or Windows. Hope it works!  man pages come out best if printed
with the dos <tt>print</tt> command.  (Copying files from FreeBSD to a mounted
dos partition is in some cases still a little risky.)

Getting the printer printing from FreeBSD involves
creating an appropriate entry in <tt>/etc/printcap</tt> and creating
a matching spool directory in <tt>/var/spool/output</tt>.  If your
printer is on lpt0 (what dos calls LPT1), you may only need to
go to <tt>/var/spool/output</tt> and (as root) create the directory
lpd by typing: 

<tscreen>
mkdir lpd
</tscreen>
Then the printer should respond if it's turned on when the
system is booted, and lp or lpr should send a file to the printer.
Whether or not the file actually prints depends on configuring it, which is
covered in the FreeBSD handbook.
<!-- ************************************************************ -->
<sect>Other Useful Commands

<p><descrip>
<tag/<tt>df</tt>/             shows file space and mounted systems.
<tag/<tt>ps aux</tt>/         shows processes running. <tt>ps ax</tt> is a narrower form.
<tag/<tt>lsdev</tt>/          lists configured devices
<tag/<tt>devmenu</tt>/        a menu of devices---in color!
<tag/<tt>rm <em>filename</em></tt>/    remove <tt>filename</tt>
<tag/<tt>rm -R <em>dir</em></tt>/      removes a directory <tt>dir</tt> and all
 subdirectories---careful!
<tag/<tt>ls -R</tt>/          lists files in the current
                directory and all subdirectories;
                I used a variant, <tt>ls -AFR &gt; where.txt</tt>,
                to get a list of all
                the files in <tt>/</tt> and (separately)
                <tt>/usr</tt> before I found better
                ways to find files.
<tag/<tt>passwd</tt>/         to change user's password (or root's password)
<tag/<tt>man hier</tt>/         man page on the Unix file system
</descrip>
Use find to locate filename in <tt>/usr</tt> or any of its subdirectories with
<tscreen>
find /usr -name "<em>filename</em>"
</tscreen>
You can use <tt>*</tt> as a wildcard in <tt>"<em>filename</em>"</tt>
(which should be in quotes).  If you tell find to search in
<tt>/</tt> instead of <tt>/usr</tt> it will look for the file(s)
on all mounted file systems, including the CDROM and the dos
partition.

An excellent book that explains Unix commands and utilities is
Abrahams &amp; Larson, <em>Unix for the Impatient</em> (2nd ed.,
Addison-Wesley, 1996).  There's also a lot of Unix information on
the Internet.  Try the <url
url="http://www.eecs.nwu.edu/unix.html" name="Unix Reference
Desk">.

<!-- ************************************************************ -->
<sect>Next Steps

<p>You should now have the tools you need to get around and edit
files, so you can get everything up and running.  There is a
great deal of information in the FreeBSD handbook (which is
probably on your hard drive) and <url
url="http://www.freebsd.org" name="FreeBSD's web site">.  A wide
variety of packages and ports are on the <htmlurl
url="http://www.cdrom.com" name="Walnut Creek"> CDROM as well as
the web site.  The handbook tells you more about how to use them
(get the package if it exists, with <tt>pkg_add
/cdrom/packages/All/<em>packagename</em></tt>, where
<em>packagename</em> is the filename of the package).  The cdrom
has lists of the packages and ports with brief descriptions in
<tt>cdrom/packages/index</tt>, <tt>cdrom/packages/index.txt</tt>,
and <tt>cdrom/ports/index</tt>, with fuller descriptions in
<tt>/cdrom/ports/*/*/pkg/DESCR</tt>, where the <tt>*</tt>s
represent subdirectories of kinds of programs and program names
respectively.

If you find the handbook too sophisticated (what with
<tt>lndir</tt> and all) on installing ports from the cdrom,
here's what usually works:

Find the port you want, say <tt>kermit</tt>.  There will be a directory
for it on the cdrom.  Copy the subdirectory to
<tt>/usr/local</tt> (a good place for software you add that
should be available to all users) with:
<tscreen>
cp -R /cdrom/ports/comm/kermit /usr/local
</tscreen>
This should result in a <tt>/usr/local/kermit</tt> subdirectory
that has all the files that the <tt>kermit</tt> subdirectory on
the CDROM has.

Next, check <tt>/cdrom/ports/distfiles</tt> for a file with a name
that indicates it's the port you want.  Copy that file to
<tt>/usr/ports/distfiles</tt>.  (Create <tt>/usr/ports/distfiles</tt>
if it doesn't exist using <em>mkdir</em>.)  In the case of <tt>kermit</tt>,
there is no distfile.

Then <tt>cd</tt> to the subdirectory of
<tt>/usr/local/kermit</tt> that has the file Makefile.  Type
<tscreen>
make all install
</tscreen>

During this process the port will ftp to get any compressed files it
needs that it didn't find in <tt>/usr/ports/distfiles</tt>.  If you
don't have   your network running yet and there was no file for the
port in <tt>/cdrom/ports/distfiles</tt>,  you will have to get the
distfile using another machine and copy it to
<tt>/usr/ports/distfiles</tt> from a floppy or your dos partition.
Read <tt>Makefile</tt> (with <tt>cat</tt> or <tt>more</tt> or
<tt>view</tt>) to find out where to go (the master distribution site)
to get the file and what its name is.  Its name will be truncated
when downloaded to DOS, and after you get it into
<tt>/usr/ports/distfiles</tt> you'll have to rename it (with the
<tt>mv</tt> command) to its original name so it can be found.  (Use
binary file transfers!)  Then go back to <tt>/usr/local/kermit</tt>,
find the directory with <tt>Makefile</tt>, and type <tt>make all
install</tt>.

The other thing that happens when installing ports or packages is that
some other program is needed.  If the installation stops with a message
"can't find unzip" or whatever, you might need to install the package
or port for unzip before you continue.

Once it's installed type <tt>rehash</tt> to make FreeBSD
<tt>reread</tt> the files in the path so it knows what's there.
(If you get a lot of "path not found" messages when you use
<tt>whereis</tt> or which, you might want to make additions to
the list of directories in the path statement in <tt>.cshrc</tt>
in your home directory.  The path statement in Unix does the same
kind of work it does in DOS, except the current directory is not
(by default) in the path for security reasons;  if
the command you want is in the directory you're in, you need to
type <tt>./</tt> before the command to make it work; no space after the
slash.)

You might want to get the most recent version of Netscape from their
<url url="ftp://ftp.netscape.com" name="ftp site">. (Netscape
requires the X Window System.) The version you want is the "unknown
bsd" version.  Just use <tt>gunzip <em>filename</em></tt> and <tt>tar
xvf <em>filename</em></tt> on it, move the binary to
<tt>/usr/local/bin</tt> or some other place binaries are kept,
<tt>rehash</tt>, and then put the following lines in <tt>.cshrc</tt>
in each user's home directory or (easier) in
<tt>/etc/csh.cshrc</tt>,  the system-wide csh start-up file:
<tscreen>
setenv XKEYSYMDB /usr/X11R6/lib/X11/XKeysymDB<newline>
setenv XNLSPATH /usr/X11R6/lib/X11/nls
</tscreen>
This assumes that the file <tt>XKeysymDB</tt> and the directory
<tt>nls</tt> are in
<tt>/usr/X11R6/lib/X11</tt>; if they're not, find them and put them there.

If you originally got Netscape as a port using the CDROM (or ftp),
don't replace <tt>/usr/local/bin/netscape</tt> with the new netscape binary;
this is just a shell script that sets up the environmental variables
for you. Instead rename the new binary to <tt>netscape.bin</tt> and replace the
 old
binary, which is <tt>/usr/local/lib/netscape/netscape.bin</tt>.


<!-- ************************************************************ -->
<sect>Other

<p>As root, you can dismount the CDROM with <tt>/sbin/umount
/cdrom</tt>, take it out of the drive, insert another one, and
mount it with <tt>/sbin/mount_cd9660 /dev/cd0a /cdrom</tt>
assuming <tt>cd0a</tt> is the device name for your CDROM drive.

Using the live file system---the second of FreeBSD's CDROM disks---is
useful if you've got limited space.  You might try using
<tt>emacs</tt> or playing games from the cdrom.  This involves using
<tt>lndir</tt>, which gets installed with the X Window System, to tell the
program(s) where to find the necessary files, because they're in the
<tt>/cdrom</tt> file system instead of in <tt>/usr</tt> and its
subdirectories, which is where they're expected to be.  Read <tt>man
lndir</tt>.

You can delete a user (say, jack) by using the command <tt>vipw</tt>
to bring up the <tt>master.passwd</tt> file (do not use vi directly
on master.passwd); delete the line for jack and save the file.  Then
edit <tt>/etc/group</tt>, eliminating jack wherever it appears.
Finally, go to <tt>/usr/home</tt> and use <tt>rm -R</tt> jack (to
get rid of user jack's home directory files).

<!-- ************************************************************ -->
<sect>Comments Welcome

<p>If you use this guide I'd be interested in knowing where it was
unclear and what was left out that you think should be included, and
if it was helpful.  My thanks to Eugene W. Stark, professor of
computer science at SUNY-Stony Brook, and John Fieber for helpful
comments.

Annelise Anderson <htmlurl url="mailto:andrsn@hoover.stanford.edu"
             name="&lt;andrsn@hoover.stanford.edu&gt;">

</article>


